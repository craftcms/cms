{"version":3,"sources":["jquery.fileupload.js"],"names":["factory","define","amd","exports","require","window","jQuery","$","getDragHandler","type","isDragOver","e","dataTransfer","originalEvent","inArray","types","this","_trigger","Event","delegatedEvent","preventDefault","dropEffect","support","fileInput","RegExp","test","navigator","userAgent","prop","xhrFileUpload","ProgressEvent","FileReader","xhrFormDataFileUpload","FormData","blobSlice","Blob","prototype","slice","webkitSlice","mozSlice","widget","options","dropZone","document","pasteZone","undefined","replaceFileInput","paramName","singleFileUploads","limitMultiFileUploads","limitMultiFileUploadSize","limitMultiFileUploadSizeOverhead","sequentialUploads","limitConcurrentUploads","forceIframeTransport","redirect","redirectParamName","postMessage","multipart","maxChunkSize","uploadedBytes","recalculateProgress","progressInterval","bitrateInterval","autoUpload","uniqueFilenames","messages","i18n","message","context","toString","each","key","value","replace","formData","form","serializeArray","add","data","isDefaultPrevented","fileupload","process","done","submit","processData","contentType","cache","timeout","_specialOptions","_blobSlice","apply","arguments","_BitrateTimer","timestamp","Date","now","getTime","loaded","bitrate","getBitrate","interval","timeDiff","_isXHRUpload","_getFormData","isArray","name","push","_getTotal","files","total","index","file","size","_initProgressObject","obj","progress","_progress","extend","_initResponseObject","_response","Object","hasOwnProperty","call","_onProgress","lengthComputable","_time","Math","floor","chunkSize","_bitrateTimer","_initProgressListener","that","xhr","ajaxSettings","upload","bind","oe","_deinitProgressListener","unbind","_isInstanceOf","_getUniqueFilename","map","String","_","p1","p2","Number","_initXHRData","headers","contentRange","blob","encodeURI","uploadName","field","append","fileName","_initIframeSettings","targetHost","url","dataType","location","host","_initDataSettings","_chunkedUpload","_getParamName","input","i","length","_initFormSettings","href","toUpperCase","formAcceptCharset","attr","_getAJAXSettings","_getDeferredState","deferred","state","isResolved","isRejected","_enhancePromise","promise","success","error","fail","complete","always","_getXHRPromise","resolveOrReject","args","dfd","Deferred","resolveWith","rejectWith","abort","_addConvenienceMethods","getPromise","resolveFunc","rejectFunc","_processQueue","then","errorThrown","jqXHR","_onSend","processing","response","_getUploadedBytes","range","getResponseHeader","parts","split","upperBytesPos","parseInt","testOnly","fs","ub","mcs","o","currentLoaded","ajax","result","textStatus","_beforeSend","_active","_onDone","_onFail","_onAlways","jqXHRorResult","jqXHRorError","send","_sending","aborted","nextSlot","_slots","shift","resolve","slot","pipe","_sequence","_onAdd","paramNameSet","paramNameSlice","fileSet","filesLength","limit","limitSize","overhead","batchSize","j","originalFiles","element","newData","_replaceFileInput","inputClone","clone","restoreFocus","is","activeElement","fileInputClone","reset","after","detach","focus","cleanData","el","_handleFileTreeEntry","entry","path","errorHandler","dirReader","entries","readEntries","results","concat","_handleFileTreeEntries","successHandler","isFile","_file","relativePath","isDirectory","createReader","when","Array","_getDroppedFiles","items","webkitGetAsEntry","getAsEntry","item","getAsFile","makeArray","_getSingleFileInputFiles","fileSize","_getFileInputFiles","_onChange","target","_onPaste","clipboardData","_onDrop","_onDragOver","_onDragEnter","_onDragLeave","_initEventHandlers","_on","dragover","drop","dragenter","dragleave","paste","change","_destroyEventHandlers","_off","_destroy","_setOption","reinit","_super","_initSpecialOptions","find","_getRegExp","str","modifiers","pop","join","_isRegExpOption","_initDataAttributes","attributes","toLowerCase","charAt","_create","active","disabled","reject"],"mappings":"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","file":"jquery.fileupload.js","sourcesContent":["/*\n * jQuery File Upload Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, require */\n/* eslint-disable new-cap */\n\n(function(factory) {\n  'use strict';\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['jquery', 'jquery-ui/ui/widget'], factory);\n  } else if (typeof exports === 'object') {\n    // Node/CommonJS:\n    factory(require('jquery'), require('./vendor/jquery.ui.widget'));\n  } else {\n    // Browser globals:\n    factory(window.jQuery);\n  }\n})(function($) {\n  'use strict';\n\n  // Detect file input support, based on\n  // https://viljamis.com/2012/file-upload-support-on-mobile/\n  $.support.fileInput = !(\n    new RegExp(\n      // Handle devices which give false positives for the feature detection:\n      '(Android (1\\\\.[0156]|2\\\\.[01]))' +\n        '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +\n        '|(w(eb)?OSBrowser)|(webOS)' +\n        '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'\n    ).test(window.navigator.userAgent) ||\n    // Feature detection for all other devices:\n    $('<input type=\"file\"/>').prop('disabled')\n  );\n\n  // The FileReader API is not actually used, but works as feature detection,\n  // as some Safari versions (5?) support XHR file uploads via the FormData API,\n  // but not non-multipart XHR file uploads.\n  // window.XMLHttpRequestUpload is not available on IE10, so we check for\n  // window.ProgressEvent instead to detect XHR2 file upload capability:\n  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);\n  $.support.xhrFormDataFileUpload = !!window.FormData;\n\n  // Detect support for Blob slicing (required for chunked uploads):\n  $.support.blobSlice =\n    window.Blob &&\n    (Blob.prototype.slice ||\n      Blob.prototype.webkitSlice ||\n      Blob.prototype.mozSlice);\n\n  /**\n   * Helper function to create drag handlers for dragover/dragenter/dragleave\n   *\n   * @param {string} type Event type\n   * @returns {Function} Drag handler\n   */\n  function getDragHandler(type) {\n    var isDragOver = type === 'dragover';\n    return function(e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var dataTransfer = e.dataTransfer;\n      if (\n        dataTransfer &&\n        $.inArray('Files', dataTransfer.types) !== -1 &&\n        this._trigger(type, $.Event(type, { delegatedEvent: e })) !== false\n      ) {\n        e.preventDefault();\n        if (isDragOver) {\n          dataTransfer.dropEffect = 'copy';\n        }\n      }\n    };\n  }\n\n  // The fileupload widget listens for change events on file input fields defined\n  // via fileInput setting and paste or drop events of the given dropZone.\n  // In addition to the default jQuery Widget methods, the fileupload widget\n  // exposes the \"add\" and \"send\" methods, to add or directly send files using\n  // the fileupload API.\n  // By default, files added via file input selection, paste, drag & drop or\n  // \"add\" method are uploaded immediately, but it is possible to override\n  // the \"add\" callback option to queue file uploads.\n  $.widget('blueimp.fileupload', {\n    options: {\n      // The drop target element(s), by the default the complete document.\n      // Set to null to disable drag & drop support:\n      dropZone: $(document),\n      // The paste target element(s), by the default undefined.\n      // Set to a DOM node or jQuery object to enable file pasting:\n      pasteZone: undefined,\n      // The file input field(s), that are listened to for change events.\n      // If undefined, it is set to the file input fields inside\n      // of the widget element on plugin initialization.\n      // Set to null to disable the change listener.\n      fileInput: undefined,\n      // By default, the file input field is replaced with a clone after\n      // each input field change event. This is required for iframe transport\n      // queues and allows change events to be fired for the same file\n      // selection, but can be disabled by setting the following option to false:\n      replaceFileInput: true,\n      // The parameter name for the file form data (the request argument name).\n      // If undefined or empty, the name property of the file input field is\n      // used, or \"files[]\" if the file input name property is also empty,\n      // can be a string or an array of strings:\n      paramName: undefined,\n      // By default, each file of a selection is uploaded using an individual\n      // request for XHR type uploads. Set to false to upload file\n      // selections in one request each:\n      singleFileUploads: true,\n      // To limit the number of files uploaded with one XHR request,\n      // set the following option to an integer greater than 0:\n      limitMultiFileUploads: undefined,\n      // The following option limits the number of files uploaded with one\n      // XHR request to keep the request size under or equal to the defined\n      // limit in bytes:\n      limitMultiFileUploadSize: undefined,\n      // Multipart file uploads add a number of bytes to each uploaded file,\n      // therefore the following option adds an overhead for each file used\n      // in the limitMultiFileUploadSize configuration:\n      limitMultiFileUploadSizeOverhead: 512,\n      // Set the following option to true to issue all file upload requests\n      // in a sequential order:\n      sequentialUploads: false,\n      // To limit the number of concurrent uploads,\n      // set the following option to an integer greater than 0:\n      limitConcurrentUploads: undefined,\n      // Set the following option to true to force iframe transport uploads:\n      forceIframeTransport: false,\n      // Set the following option to the location of a redirect url on the\n      // origin server, for cross-domain iframe transport uploads:\n      redirect: undefined,\n      // The parameter name for the redirect url, sent as part of the form\n      // data and set to 'redirect' if this option is empty:\n      redirectParamName: undefined,\n      // Set the following option to the location of a postMessage window,\n      // to enable postMessage transport uploads:\n      postMessage: undefined,\n      // By default, XHR file uploads are sent as multipart/form-data.\n      // The iframe transport is always using multipart/form-data.\n      // Set to false to enable non-multipart XHR uploads:\n      multipart: true,\n      // To upload large files in smaller chunks, set the following option\n      // to a preferred maximum chunk size. If set to 0, null or undefined,\n      // or the browser does not support the required Blob API, files will\n      // be uploaded as a whole.\n      maxChunkSize: undefined,\n      // When a non-multipart upload or a chunked multipart upload has been\n      // aborted, this option can be used to resume the upload by setting\n      // it to the size of the already uploaded bytes. This option is most\n      // useful when modifying the options object inside of the \"add\" or\n      // \"send\" callbacks, as the options are cloned for each file upload.\n      uploadedBytes: undefined,\n      // By default, failed (abort or error) file uploads are removed from the\n      // global progress calculation. Set the following option to false to\n      // prevent recalculating the global progress data:\n      recalculateProgress: true,\n      // Interval in milliseconds to calculate and trigger progress events:\n      progressInterval: 100,\n      // Interval in milliseconds to calculate progress bitrate:\n      bitrateInterval: 500,\n      // By default, uploads are started automatically when adding files:\n      autoUpload: true,\n      // By default, duplicate file names are expected to be handled on\n      // the server-side. If this is not possible (e.g. when uploading\n      // files directly to Amazon S3), the following option can be set to\n      // an empty object or an object mapping existing filenames, e.g.:\n      // { \"image.jpg\": true, \"image (1).jpg\": true }\n      // If it is set, all files will be uploaded with unique filenames,\n      // adding increasing number suffixes if necessary, e.g.:\n      // \"image (2).jpg\"\n      uniqueFilenames: undefined,\n\n      // Error and info messages:\n      messages: {\n        uploadedBytes: 'Uploaded bytes exceed file size'\n      },\n\n      // Translation function, gets the message key to be translated\n      // and an object with context specific data as arguments:\n      i18n: function(message, context) {\n        // eslint-disable-next-line no-param-reassign\n        message = this.messages[message] || message.toString();\n        if (context) {\n          $.each(context, function(key, value) {\n            // eslint-disable-next-line no-param-reassign\n            message = message.replace('{' + key + '}', value);\n          });\n        }\n        return message;\n      },\n\n      // Additional form data to be sent along with the file uploads can be set\n      // using this option, which accepts an array of objects with name and\n      // value properties, a function returning such an array, a FormData\n      // object (for XHR file uploads), or a simple object.\n      // The form of the first fileInput is given as parameter to the function:\n      formData: function(form) {\n        return form.serializeArray();\n      },\n\n      // The add callback is invoked as soon as files are added to the fileupload\n      // widget (via file input selection, drag & drop, paste or add API call).\n      // If the singleFileUploads option is enabled, this callback will be\n      // called once for each file in the selection for XHR file uploads, else\n      // once for each file selection.\n      //\n      // The upload starts when the submit method is invoked on the data parameter.\n      // The data object contains a files property holding the added files\n      // and allows you to override plugin options as well as define ajax settings.\n      //\n      // Listeners for this callback can also be bound the following way:\n      // .bind('fileuploadadd', func);\n      //\n      // data.submit() returns a Promise object and allows to attach additional\n      // handlers using jQuery's Deferred callbacks:\n      // data.submit().done(func).fail(func).always(func);\n      add: function(e, data) {\n        if (e.isDefaultPrevented()) {\n          return false;\n        }\n        if (\n          data.autoUpload ||\n          (data.autoUpload !== false &&\n            $(this).fileupload('option', 'autoUpload'))\n        ) {\n          data.process().done(function() {\n            data.submit();\n          });\n        }\n      },\n\n      // Other callbacks:\n\n      // Callback for the submit event of each file upload:\n      // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\n\n      // Callback for the start of each file upload request:\n      // send: function (e, data) {}, // .bind('fileuploadsend', func);\n\n      // Callback for successful uploads:\n      // done: function (e, data) {}, // .bind('fileuploaddone', func);\n\n      // Callback for failed (abort or error) uploads:\n      // fail: function (e, data) {}, // .bind('fileuploadfail', func);\n\n      // Callback for completed (success, abort or error) requests:\n      // always: function (e, data) {}, // .bind('fileuploadalways', func);\n\n      // Callback for upload progress events:\n      // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\n\n      // Callback for global upload progress events:\n      // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\n\n      // Callback for uploads start, equivalent to the global ajaxStart event:\n      // start: function (e) {}, // .bind('fileuploadstart', func);\n\n      // Callback for uploads stop, equivalent to the global ajaxStop event:\n      // stop: function (e) {}, // .bind('fileuploadstop', func);\n\n      // Callback for change events of the fileInput(s):\n      // change: function (e, data) {}, // .bind('fileuploadchange', func);\n\n      // Callback for paste events to the pasteZone(s):\n      // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\n\n      // Callback for drop events of the dropZone(s):\n      // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\n\n      // Callback for dragover events of the dropZone(s):\n      // dragover: function (e) {}, // .bind('fileuploaddragover', func);\n\n      // Callback before the start of each chunk upload request (before form data initialization):\n      // chunkbeforesend: function (e, data) {}, // .bind('fileuploadchunkbeforesend', func);\n\n      // Callback for the start of each chunk upload request:\n      // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\n\n      // Callback for successful chunk uploads:\n      // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\n\n      // Callback for failed (abort or error) chunk uploads:\n      // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\n\n      // Callback for completed (success, abort or error) chunk upload requests:\n      // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\n\n      // The plugin options are used as settings object for the ajax calls.\n      // The following are jQuery ajax settings required for the file uploads:\n      processData: false,\n      contentType: false,\n      cache: false,\n      timeout: 0\n    },\n\n    // A list of options that require reinitializing event listeners and/or\n    // special initialization code:\n    _specialOptions: [\n      'fileInput',\n      'dropZone',\n      'pasteZone',\n      'multipart',\n      'forceIframeTransport'\n    ],\n\n    _blobSlice:\n      $.support.blobSlice &&\n      function() {\n        var slice = this.slice || this.webkitSlice || this.mozSlice;\n        return slice.apply(this, arguments);\n      },\n\n    _BitrateTimer: function() {\n      this.timestamp = Date.now ? Date.now() : new Date().getTime();\n      this.loaded = 0;\n      this.bitrate = 0;\n      this.getBitrate = function(now, loaded, interval) {\n        var timeDiff = now - this.timestamp;\n        if (!this.bitrate || !interval || timeDiff > interval) {\n          this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n          this.loaded = loaded;\n          this.timestamp = now;\n        }\n        return this.bitrate;\n      };\n    },\n\n    _isXHRUpload: function(options) {\n      return (\n        !options.forceIframeTransport &&\n        ((!options.multipart && $.support.xhrFileUpload) ||\n          $.support.xhrFormDataFileUpload)\n      );\n    },\n\n    _getFormData: function(options) {\n      var formData;\n      if ($.type(options.formData) === 'function') {\n        return options.formData(options.form);\n      }\n      if ($.isArray(options.formData)) {\n        return options.formData;\n      }\n      if ($.type(options.formData) === 'object') {\n        formData = [];\n        $.each(options.formData, function(name, value) {\n          formData.push({ name: name, value: value });\n        });\n        return formData;\n      }\n      return [];\n    },\n\n    _getTotal: function(files) {\n      var total = 0;\n      $.each(files, function(index, file) {\n        total += file.size || 1;\n      });\n      return total;\n    },\n\n    _initProgressObject: function(obj) {\n      var progress = {\n        loaded: 0,\n        total: 0,\n        bitrate: 0\n      };\n      if (obj._progress) {\n        $.extend(obj._progress, progress);\n      } else {\n        obj._progress = progress;\n      }\n    },\n\n    _initResponseObject: function(obj) {\n      var prop;\n      if (obj._response) {\n        for (prop in obj._response) {\n          if (Object.prototype.hasOwnProperty.call(obj._response, prop)) {\n            delete obj._response[prop];\n          }\n        }\n      } else {\n        obj._response = {};\n      }\n    },\n\n    _onProgress: function(e, data) {\n      if (e.lengthComputable) {\n        var now = Date.now ? Date.now() : new Date().getTime(),\n          loaded;\n        if (\n          data._time &&\n          data.progressInterval &&\n          now - data._time < data.progressInterval &&\n          e.loaded !== e.total\n        ) {\n          return;\n        }\n        data._time = now;\n        loaded =\n          Math.floor(\n            (e.loaded / e.total) * (data.chunkSize || data._progress.total)\n          ) + (data.uploadedBytes || 0);\n        // Add the difference from the previously loaded state\n        // to the global loaded counter:\n        this._progress.loaded += loaded - data._progress.loaded;\n        this._progress.bitrate = this._bitrateTimer.getBitrate(\n          now,\n          this._progress.loaded,\n          data.bitrateInterval\n        );\n        data._progress.loaded = data.loaded = loaded;\n        data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\n          now,\n          loaded,\n          data.bitrateInterval\n        );\n        // Trigger a custom progress event with a total data property set\n        // to the file size(s) of the current upload and a loaded data\n        // property calculated accordingly:\n        this._trigger(\n          'progress',\n          $.Event('progress', { delegatedEvent: e }),\n          data\n        );\n        // Trigger a global progress event for all current file uploads,\n        // including ajax calls queued for sequential file uploads:\n        this._trigger(\n          'progressall',\n          $.Event('progressall', { delegatedEvent: e }),\n          this._progress\n        );\n      }\n    },\n\n    _initProgressListener: function(options) {\n      var that = this,\n        xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n      // Accesss to the native XHR object is required to add event listeners\n      // for the upload progress event:\n      if (xhr.upload) {\n        $(xhr.upload).bind('progress', function(e) {\n          var oe = e.originalEvent;\n          // Make sure the progress event properties get copied over:\n          e.lengthComputable = oe.lengthComputable;\n          e.loaded = oe.loaded;\n          e.total = oe.total;\n          that._onProgress(e, options);\n        });\n        options.xhr = function() {\n          return xhr;\n        };\n      }\n    },\n\n    _deinitProgressListener: function(options) {\n      var xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n      if (xhr.upload) {\n        $(xhr.upload).unbind('progress');\n      }\n    },\n\n    _isInstanceOf: function(type, obj) {\n      // Cross-frame instanceof check\n      return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n    },\n\n    _getUniqueFilename: function(name, map) {\n      // eslint-disable-next-line no-param-reassign\n      name = String(name);\n      if (map[name]) {\n        // eslint-disable-next-line no-param-reassign\n        name = name.replace(/(?: \\(([\\d]+)\\))?(\\.[^.]+)?$/, function(\n          _,\n          p1,\n          p2\n        ) {\n          var index = p1 ? Number(p1) + 1 : 1;\n          var ext = p2 || '';\n          return ' (' + index + ')' + ext;\n        });\n        return this._getUniqueFilename(name, map);\n      }\n      map[name] = true;\n      return name;\n    },\n\n    _initXHRData: function(options) {\n      var that = this,\n        formData,\n        file = options.files[0],\n        // Ignore non-multipart setting if not supported:\n        multipart = options.multipart || !$.support.xhrFileUpload,\n        paramName =\n          $.type(options.paramName) === 'array'\n            ? options.paramName[0]\n            : options.paramName;\n      options.headers = $.extend({}, options.headers);\n      if (options.contentRange) {\n        options.headers['Content-Range'] = options.contentRange;\n      }\n      if (!multipart || options.blob || !this._isInstanceOf('File', file)) {\n        options.headers['Content-Disposition'] =\n          'attachment; filename=\"' +\n          encodeURI(file.uploadName || file.name) +\n          '\"';\n      }\n      if (!multipart) {\n        options.contentType = file.type || 'application/octet-stream';\n        options.data = options.blob || file;\n      } else if ($.support.xhrFormDataFileUpload) {\n        if (options.postMessage) {\n          // window.postMessage does not allow sending FormData\n          // objects, so we just add the File/Blob objects to\n          // the formData array and let the postMessage window\n          // create the FormData object out of this array:\n          formData = this._getFormData(options);\n          if (options.blob) {\n            formData.push({\n              name: paramName,\n              value: options.blob\n            });\n          } else {\n            $.each(options.files, function(index, file) {\n              formData.push({\n                name:\n                  ($.type(options.paramName) === 'array' &&\n                    options.paramName[index]) ||\n                  paramName,\n                value: file\n              });\n            });\n          }\n        } else {\n          if (that._isInstanceOf('FormData', options.formData)) {\n            formData = options.formData;\n          } else {\n            formData = new FormData();\n            $.each(this._getFormData(options), function(index, field) {\n              formData.append(field.name, field.value);\n            });\n          }\n          if (options.blob) {\n            formData.append(\n              paramName,\n              options.blob,\n              file.uploadName || file.name\n            );\n          } else {\n            $.each(options.files, function(index, file) {\n              // This check allows the tests to run with\n              // dummy objects:\n              if (\n                that._isInstanceOf('File', file) ||\n                that._isInstanceOf('Blob', file)\n              ) {\n                var fileName = file.uploadName || file.name;\n                if (options.uniqueFilenames) {\n                  fileName = that._getUniqueFilename(\n                    fileName,\n                    options.uniqueFilenames\n                  );\n                }\n                formData.append(\n                  ($.type(options.paramName) === 'array' &&\n                    options.paramName[index]) ||\n                    paramName,\n                  file,\n                  fileName\n                );\n              }\n            });\n          }\n        }\n        options.data = formData;\n      }\n      // Blob reference is not needed anymore, free memory:\n      options.blob = null;\n    },\n\n    _initIframeSettings: function(options) {\n      var targetHost = $('<a></a>')\n        .prop('href', options.url)\n        .prop('host');\n      // Setting the dataType to iframe enables the iframe transport:\n      options.dataType = 'iframe ' + (options.dataType || '');\n      // The iframe transport accepts a serialized array as form data:\n      options.formData = this._getFormData(options);\n      // Add redirect url to form data on cross-domain uploads:\n      if (options.redirect && targetHost && targetHost !== location.host) {\n        options.formData.push({\n          name: options.redirectParamName || 'redirect',\n          value: options.redirect\n        });\n      }\n    },\n\n    _initDataSettings: function(options) {\n      if (this._isXHRUpload(options)) {\n        if (!this._chunkedUpload(options, true)) {\n          if (!options.data) {\n            this._initXHRData(options);\n          }\n          this._initProgressListener(options);\n        }\n        if (options.postMessage) {\n          // Setting the dataType to postmessage enables the\n          // postMessage transport:\n          options.dataType = 'postmessage ' + (options.dataType || '');\n        }\n      } else {\n        this._initIframeSettings(options);\n      }\n    },\n\n    _getParamName: function(options) {\n      var fileInput = $(options.fileInput),\n        paramName = options.paramName;\n      if (!paramName) {\n        paramName = [];\n        fileInput.each(function() {\n          var input = $(this),\n            name = input.prop('name') || 'files[]',\n            i = (input.prop('files') || [1]).length;\n          while (i) {\n            paramName.push(name);\n            i -= 1;\n          }\n        });\n        if (!paramName.length) {\n          paramName = [fileInput.prop('name') || 'files[]'];\n        }\n      } else if (!$.isArray(paramName)) {\n        paramName = [paramName];\n      }\n      return paramName;\n    },\n\n    _initFormSettings: function(options) {\n      // Retrieve missing options from the input field and the\n      // associated form, if available:\n      if (!options.form || !options.form.length) {\n        options.form = $(options.fileInput.prop('form'));\n        // If the given file input doesn't have an associated form,\n        // use the default widget file input's form:\n        if (!options.form.length) {\n          options.form = $(this.options.fileInput.prop('form'));\n        }\n      }\n      options.paramName = this._getParamName(options);\n      if (!options.url) {\n        options.url = options.form.prop('action') || location.href;\n      }\n      // The HTTP request method must be \"POST\" or \"PUT\":\n      options.type = (\n        options.type ||\n        ($.type(options.form.prop('method')) === 'string' &&\n          options.form.prop('method')) ||\n        ''\n      ).toUpperCase();\n      if (\n        options.type !== 'POST' &&\n        options.type !== 'PUT' &&\n        options.type !== 'PATCH'\n      ) {\n        options.type = 'POST';\n      }\n      if (!options.formAcceptCharset) {\n        options.formAcceptCharset = options.form.attr('accept-charset');\n      }\n    },\n\n    _getAJAXSettings: function(data) {\n      var options = $.extend({}, this.options, data);\n      this._initFormSettings(options);\n      this._initDataSettings(options);\n      return options;\n    },\n\n    // jQuery 1.6 doesn't provide .state(),\n    // while jQuery 1.8+ removed .isRejected() and .isResolved():\n    _getDeferredState: function(deferred) {\n      if (deferred.state) {\n        return deferred.state();\n      }\n      if (deferred.isResolved()) {\n        return 'resolved';\n      }\n      if (deferred.isRejected()) {\n        return 'rejected';\n      }\n      return 'pending';\n    },\n\n    // Maps jqXHR callbacks to the equivalent\n    // methods of the given Promise object:\n    _enhancePromise: function(promise) {\n      promise.success = promise.done;\n      promise.error = promise.fail;\n      promise.complete = promise.always;\n      return promise;\n    },\n\n    // Creates and returns a Promise object enhanced with\n    // the jqXHR methods abort, success, error and complete:\n    _getXHRPromise: function(resolveOrReject, context, args) {\n      var dfd = $.Deferred(),\n        promise = dfd.promise();\n      // eslint-disable-next-line no-param-reassign\n      context = context || this.options.context || promise;\n      if (resolveOrReject === true) {\n        dfd.resolveWith(context, args);\n      } else if (resolveOrReject === false) {\n        dfd.rejectWith(context, args);\n      }\n      promise.abort = dfd.promise;\n      return this._enhancePromise(promise);\n    },\n\n    // Adds convenience methods to the data callback argument:\n    _addConvenienceMethods: function(e, data) {\n      var that = this,\n        getPromise = function(args) {\n          return $.Deferred()\n            .resolveWith(that, args)\n            .promise();\n        };\n      data.process = function(resolveFunc, rejectFunc) {\n        if (resolveFunc || rejectFunc) {\n          data._processQueue = this._processQueue = (\n            this._processQueue || getPromise([this])\n          )\n            .then(function() {\n              if (data.errorThrown) {\n                return $.Deferred()\n                  .rejectWith(that, [data])\n                  .promise();\n              }\n              return getPromise(arguments);\n            })\n            .then(resolveFunc, rejectFunc);\n        }\n        return this._processQueue || getPromise([this]);\n      };\n      data.submit = function() {\n        if (this.state() !== 'pending') {\n          data.jqXHR = this.jqXHR =\n            that._trigger(\n              'submit',\n              $.Event('submit', { delegatedEvent: e }),\n              this\n            ) !== false && that._onSend(e, this);\n        }\n        return this.jqXHR || that._getXHRPromise();\n      };\n      data.abort = function() {\n        if (this.jqXHR) {\n          return this.jqXHR.abort();\n        }\n        this.errorThrown = 'abort';\n        that._trigger('fail', null, this);\n        return that._getXHRPromise(false);\n      };\n      data.state = function() {\n        if (this.jqXHR) {\n          return that._getDeferredState(this.jqXHR);\n        }\n        if (this._processQueue) {\n          return that._getDeferredState(this._processQueue);\n        }\n      };\n      data.processing = function() {\n        return (\n          !this.jqXHR &&\n          this._processQueue &&\n          that._getDeferredState(this._processQueue) === 'pending'\n        );\n      };\n      data.progress = function() {\n        return this._progress;\n      };\n      data.response = function() {\n        return this._response;\n      };\n    },\n\n    // Parses the Range header from the server response\n    // and returns the uploaded bytes:\n    _getUploadedBytes: function(jqXHR) {\n      var range = jqXHR.getResponseHeader('Range'),\n        parts = range && range.split('-'),\n        upperBytesPos = parts && parts.length > 1 && parseInt(parts[1], 10);\n      return upperBytesPos && upperBytesPos + 1;\n    },\n\n    // Uploads a file in multiple, sequential requests\n    // by splitting the file up in multiple blob chunks.\n    // If the second parameter is true, only tests if the file\n    // should be uploaded in chunks, but does not invoke any\n    // upload requests:\n    _chunkedUpload: function(options, testOnly) {\n      options.uploadedBytes = options.uploadedBytes || 0;\n      var that = this,\n        file = options.files[0],\n        fs = file.size,\n        ub = options.uploadedBytes,\n        mcs = options.maxChunkSize || fs,\n        slice = this._blobSlice,\n        dfd = $.Deferred(),\n        promise = dfd.promise(),\n        jqXHR,\n        upload;\n      if (\n        !(\n          this._isXHRUpload(options) &&\n          slice &&\n          (ub || ($.type(mcs) === 'function' ? mcs(options) : mcs) < fs)\n        ) ||\n        options.data\n      ) {\n        return false;\n      }\n      if (testOnly) {\n        return true;\n      }\n      if (ub >= fs) {\n        file.error = options.i18n('uploadedBytes');\n        return this._getXHRPromise(false, options.context, [\n          null,\n          'error',\n          file.error\n        ]);\n      }\n      // The chunk upload method:\n      upload = function() {\n        // Clone the options object for each chunk upload:\n        var o = $.extend({}, options),\n          currentLoaded = o._progress.loaded;\n        o.blob = slice.call(\n          file,\n          ub,\n          ub + ($.type(mcs) === 'function' ? mcs(o) : mcs),\n          file.type\n        );\n        // Store the current chunk size, as the blob itself\n        // will be dereferenced after data processing:\n        o.chunkSize = o.blob.size;\n        // Expose the chunk bytes position range:\n        o.contentRange =\n          'bytes ' + ub + '-' + (ub + o.chunkSize - 1) + '/' + fs;\n        // Trigger chunkbeforesend to allow form data to be updated for this chunk\n        that._trigger('chunkbeforesend', null, o);\n        // Process the upload data (the blob and potential form data):\n        that._initXHRData(o);\n        // Add progress listeners for this chunk upload:\n        that._initProgressListener(o);\n        jqXHR = (\n          (that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||\n          that._getXHRPromise(false, o.context)\n        )\n          .done(function(result, textStatus, jqXHR) {\n            ub = that._getUploadedBytes(jqXHR) || ub + o.chunkSize;\n            // Create a progress event if no final progress event\n            // with loaded equaling total has been triggered\n            // for this chunk:\n            if (currentLoaded + o.chunkSize - o._progress.loaded) {\n              that._onProgress(\n                $.Event('progress', {\n                  lengthComputable: true,\n                  loaded: ub - o.uploadedBytes,\n                  total: ub - o.uploadedBytes\n                }),\n                o\n              );\n            }\n            options.uploadedBytes = o.uploadedBytes = ub;\n            o.result = result;\n            o.textStatus = textStatus;\n            o.jqXHR = jqXHR;\n            that._trigger('chunkdone', null, o);\n            that._trigger('chunkalways', null, o);\n            if (ub < fs) {\n              // File upload not yet complete,\n              // continue with the next chunk:\n              upload();\n            } else {\n              dfd.resolveWith(o.context, [result, textStatus, jqXHR]);\n            }\n          })\n          .fail(function(jqXHR, textStatus, errorThrown) {\n            o.jqXHR = jqXHR;\n            o.textStatus = textStatus;\n            o.errorThrown = errorThrown;\n            that._trigger('chunkfail', null, o);\n            that._trigger('chunkalways', null, o);\n            dfd.rejectWith(o.context, [jqXHR, textStatus, errorThrown]);\n          })\n          .always(function() {\n            that._deinitProgressListener(o);\n          });\n      };\n      this._enhancePromise(promise);\n      promise.abort = function() {\n        return jqXHR.abort();\n      };\n      upload();\n      return promise;\n    },\n\n    _beforeSend: function(e, data) {\n      if (this._active === 0) {\n        // the start callback is triggered when an upload starts\n        // and no other uploads are currently running,\n        // equivalent to the global ajaxStart event:\n        this._trigger('start');\n        // Set timer for global bitrate progress calculation:\n        this._bitrateTimer = new this._BitrateTimer();\n        // Reset the global progress values:\n        this._progress.loaded = this._progress.total = 0;\n        this._progress.bitrate = 0;\n      }\n      // Make sure the container objects for the .response() and\n      // .progress() methods on the data object are available\n      // and reset to their initial state:\n      this._initResponseObject(data);\n      this._initProgressObject(data);\n      data._progress.loaded = data.loaded = data.uploadedBytes || 0;\n      data._progress.total = data.total = this._getTotal(data.files) || 1;\n      data._progress.bitrate = data.bitrate = 0;\n      this._active += 1;\n      // Initialize the global progress values:\n      this._progress.loaded += data.loaded;\n      this._progress.total += data.total;\n    },\n\n    _onDone: function(result, textStatus, jqXHR, options) {\n      var total = options._progress.total,\n        response = options._response;\n      if (options._progress.loaded < total) {\n        // Create a progress event if no final progress event\n        // with loaded equaling total has been triggered:\n        this._onProgress(\n          $.Event('progress', {\n            lengthComputable: true,\n            loaded: total,\n            total: total\n          }),\n          options\n        );\n      }\n      response.result = options.result = result;\n      response.textStatus = options.textStatus = textStatus;\n      response.jqXHR = options.jqXHR = jqXHR;\n      this._trigger('done', null, options);\n    },\n\n    _onFail: function(jqXHR, textStatus, errorThrown, options) {\n      var response = options._response;\n      if (options.recalculateProgress) {\n        // Remove the failed (error or abort) file upload from\n        // the global progress calculation:\n        this._progress.loaded -= options._progress.loaded;\n        this._progress.total -= options._progress.total;\n      }\n      response.jqXHR = options.jqXHR = jqXHR;\n      response.textStatus = options.textStatus = textStatus;\n      response.errorThrown = options.errorThrown = errorThrown;\n      this._trigger('fail', null, options);\n    },\n\n    _onAlways: function(jqXHRorResult, textStatus, jqXHRorError, options) {\n      // jqXHRorResult, textStatus and jqXHRorError are added to the\n      // options object via done and fail callbacks\n      this._trigger('always', null, options);\n    },\n\n    _onSend: function(e, data) {\n      if (!data.submit) {\n        this._addConvenienceMethods(e, data);\n      }\n      var that = this,\n        jqXHR,\n        aborted,\n        slot,\n        pipe,\n        options = that._getAJAXSettings(data),\n        send = function() {\n          that._sending += 1;\n          // Set timer for bitrate progress calculation:\n          options._bitrateTimer = new that._BitrateTimer();\n          jqXHR =\n            jqXHR ||\n            (\n              ((aborted ||\n                that._trigger(\n                  'send',\n                  $.Event('send', { delegatedEvent: e }),\n                  options\n                ) === false) &&\n                that._getXHRPromise(false, options.context, aborted)) ||\n              that._chunkedUpload(options) ||\n              $.ajax(options)\n            )\n              .done(function(result, textStatus, jqXHR) {\n                that._onDone(result, textStatus, jqXHR, options);\n              })\n              .fail(function(jqXHR, textStatus, errorThrown) {\n                that._onFail(jqXHR, textStatus, errorThrown, options);\n              })\n              .always(function(jqXHRorResult, textStatus, jqXHRorError) {\n                that._deinitProgressListener(options);\n                that._onAlways(\n                  jqXHRorResult,\n                  textStatus,\n                  jqXHRorError,\n                  options\n                );\n                that._sending -= 1;\n                that._active -= 1;\n                if (\n                  options.limitConcurrentUploads &&\n                  options.limitConcurrentUploads > that._sending\n                ) {\n                  // Start the next queued upload,\n                  // that has not been aborted:\n                  var nextSlot = that._slots.shift();\n                  while (nextSlot) {\n                    if (that._getDeferredState(nextSlot) === 'pending') {\n                      nextSlot.resolve();\n                      break;\n                    }\n                    nextSlot = that._slots.shift();\n                  }\n                }\n                if (that._active === 0) {\n                  // The stop callback is triggered when all uploads have\n                  // been completed, equivalent to the global ajaxStop event:\n                  that._trigger('stop');\n                }\n              });\n          return jqXHR;\n        };\n      this._beforeSend(e, options);\n      if (\n        this.options.sequentialUploads ||\n        (this.options.limitConcurrentUploads &&\n          this.options.limitConcurrentUploads <= this._sending)\n      ) {\n        if (this.options.limitConcurrentUploads > 1) {\n          slot = $.Deferred();\n          this._slots.push(slot);\n          pipe = slot.then(send);\n        } else {\n          this._sequence = this._sequence.then(send, send);\n          pipe = this._sequence;\n        }\n        // Return the piped Promise object, enhanced with an abort method,\n        // which is delegated to the jqXHR object of the current upload,\n        // and jqXHR callbacks mapped to the equivalent Promise methods:\n        pipe.abort = function() {\n          aborted = [undefined, 'abort', 'abort'];\n          if (!jqXHR) {\n            if (slot) {\n              slot.rejectWith(options.context, aborted);\n            }\n            return send();\n          }\n          return jqXHR.abort();\n        };\n        return this._enhancePromise(pipe);\n      }\n      return send();\n    },\n\n    _onAdd: function(e, data) {\n      var that = this,\n        result = true,\n        options = $.extend({}, this.options, data),\n        files = data.files,\n        filesLength = files.length,\n        limit = options.limitMultiFileUploads,\n        limitSize = options.limitMultiFileUploadSize,\n        overhead = options.limitMultiFileUploadSizeOverhead,\n        batchSize = 0,\n        paramName = this._getParamName(options),\n        paramNameSet,\n        paramNameSlice,\n        fileSet,\n        i,\n        j = 0;\n      if (!filesLength) {\n        return false;\n      }\n      if (limitSize && files[0].size === undefined) {\n        limitSize = undefined;\n      }\n      if (\n        !(options.singleFileUploads || limit || limitSize) ||\n        !this._isXHRUpload(options)\n      ) {\n        fileSet = [files];\n        paramNameSet = [paramName];\n      } else if (!(options.singleFileUploads || limitSize) && limit) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i += limit) {\n          fileSet.push(files.slice(i, i + limit));\n          paramNameSlice = paramName.slice(i, i + limit);\n          if (!paramNameSlice.length) {\n            paramNameSlice = paramName;\n          }\n          paramNameSet.push(paramNameSlice);\n        }\n      } else if (!options.singleFileUploads && limitSize) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i = i + 1) {\n          batchSize += files[i].size + overhead;\n          if (\n            i + 1 === filesLength ||\n            batchSize + files[i + 1].size + overhead > limitSize ||\n            (limit && i + 1 - j >= limit)\n          ) {\n            fileSet.push(files.slice(j, i + 1));\n            paramNameSlice = paramName.slice(j, i + 1);\n            if (!paramNameSlice.length) {\n              paramNameSlice = paramName;\n            }\n            paramNameSet.push(paramNameSlice);\n            j = i + 1;\n            batchSize = 0;\n          }\n        }\n      } else {\n        paramNameSet = paramName;\n      }\n      data.originalFiles = files;\n      $.each(fileSet || files, function(index, element) {\n        var newData = $.extend({}, data);\n        newData.files = fileSet ? element : [element];\n        newData.paramName = paramNameSet[index];\n        that._initResponseObject(newData);\n        that._initProgressObject(newData);\n        that._addConvenienceMethods(e, newData);\n        result = that._trigger(\n          'add',\n          $.Event('add', { delegatedEvent: e }),\n          newData\n        );\n        return result;\n      });\n      return result;\n    },\n\n    _replaceFileInput: function(data) {\n      var input = data.fileInput,\n        inputClone = input.clone(true),\n        restoreFocus = input.is(document.activeElement);\n      // Add a reference for the new cloned file input to the data argument:\n      data.fileInputClone = inputClone;\n      $('<form></form>')\n        .append(inputClone)[0]\n        .reset();\n      // Detaching allows to insert the fileInput on another form\n      // without loosing the file input value:\n      input.after(inputClone).detach();\n      // If the fileInput had focus before it was detached,\n      // restore focus to the inputClone.\n      if (restoreFocus) {\n        inputClone.focus();\n      }\n      // Avoid memory leaks with the detached file input:\n      $.cleanData(input.unbind('remove'));\n      // Replace the original file input element in the fileInput\n      // elements set with the clone, which has been copied including\n      // event handlers:\n      this.options.fileInput = this.options.fileInput.map(function(i, el) {\n        if (el === input[0]) {\n          return inputClone[0];\n        }\n        return el;\n      });\n      // If the widget has been initialized on the file input itself,\n      // override this.element with the file input clone:\n      if (input[0] === this.element[0]) {\n        this.element = inputClone;\n      }\n    },\n\n    _handleFileTreeEntry: function(entry, path) {\n      var that = this,\n        dfd = $.Deferred(),\n        entries = [],\n        dirReader,\n        errorHandler = function(e) {\n          if (e && !e.entry) {\n            e.entry = entry;\n          }\n          // Since $.when returns immediately if one\n          // Deferred is rejected, we use resolve instead.\n          // This allows valid files and invalid items\n          // to be returned together in one set:\n          dfd.resolve([e]);\n        },\n        successHandler = function(entries) {\n          that\n            ._handleFileTreeEntries(entries, path + entry.name + '/')\n            .done(function(files) {\n              dfd.resolve(files);\n            })\n            .fail(errorHandler);\n        },\n        readEntries = function() {\n          dirReader.readEntries(function(results) {\n            if (!results.length) {\n              successHandler(entries);\n            } else {\n              entries = entries.concat(results);\n              readEntries();\n            }\n          }, errorHandler);\n        };\n      // eslint-disable-next-line no-param-reassign\n      path = path || '';\n      if (entry.isFile) {\n        if (entry._file) {\n          // Workaround for Chrome bug #149735\n          entry._file.relativePath = path;\n          dfd.resolve(entry._file);\n        } else {\n          entry.file(function(file) {\n            file.relativePath = path;\n            dfd.resolve(file);\n          }, errorHandler);\n        }\n      } else if (entry.isDirectory) {\n        dirReader = entry.createReader();\n        readEntries();\n      } else {\n        // Return an empty list for file system items\n        // other than files or directories:\n        dfd.resolve([]);\n      }\n      return dfd.promise();\n    },\n\n    _handleFileTreeEntries: function(entries, path) {\n      var that = this;\n      return $.when\n        .apply(\n          $,\n          $.map(entries, function(entry) {\n            return that._handleFileTreeEntry(entry, path);\n          })\n        )\n        .then(function() {\n          return Array.prototype.concat.apply([], arguments);\n        });\n    },\n\n    _getDroppedFiles: function(dataTransfer) {\n      // eslint-disable-next-line no-param-reassign\n      dataTransfer = dataTransfer || {};\n      var items = dataTransfer.items;\n      if (\n        items &&\n        items.length &&\n        (items[0].webkitGetAsEntry || items[0].getAsEntry)\n      ) {\n        return this._handleFileTreeEntries(\n          $.map(items, function(item) {\n            var entry;\n            if (item.webkitGetAsEntry) {\n              entry = item.webkitGetAsEntry();\n              if (entry) {\n                // Workaround for Chrome bug #149735:\n                entry._file = item.getAsFile();\n              }\n              return entry;\n            }\n            return item.getAsEntry();\n          })\n        );\n      }\n      return $.Deferred()\n        .resolve($.makeArray(dataTransfer.files))\n        .promise();\n    },\n\n    _getSingleFileInputFiles: function(fileInput) {\n      // eslint-disable-next-line no-param-reassign\n      fileInput = $(fileInput);\n      var entries =\n          fileInput.prop('webkitEntries') || fileInput.prop('entries'),\n        files,\n        value;\n      if (entries && entries.length) {\n        return this._handleFileTreeEntries(entries);\n      }\n      files = $.makeArray(fileInput.prop('files'));\n      if (!files.length) {\n        value = fileInput.prop('value');\n        if (!value) {\n          return $.Deferred()\n            .resolve([])\n            .promise();\n        }\n        // If the files property is not available, the browser does not\n        // support the File API and we add a pseudo File object with\n        // the input value as name with path information removed:\n        files = [{ name: value.replace(/^.*\\\\/, '') }];\n      } else if (files[0].name === undefined && files[0].fileName) {\n        // File normalization for Safari 4 and Firefox 3:\n        $.each(files, function(index, file) {\n          file.name = file.fileName;\n          file.size = file.fileSize;\n        });\n      }\n      return $.Deferred()\n        .resolve(files)\n        .promise();\n    },\n\n    _getFileInputFiles: function(fileInput) {\n      if (!(fileInput instanceof $) || fileInput.length === 1) {\n        return this._getSingleFileInputFiles(fileInput);\n      }\n      return $.when\n        .apply($, $.map(fileInput, this._getSingleFileInputFiles))\n        .then(function() {\n          return Array.prototype.concat.apply([], arguments);\n        });\n    },\n\n    _onChange: function(e) {\n      var that = this,\n        data = {\n          fileInput: $(e.target),\n          form: $(e.target.form)\n        };\n      this._getFileInputFiles(data.fileInput).always(function(files) {\n        data.files = files;\n        if (that.options.replaceFileInput) {\n          that._replaceFileInput(data);\n        }\n        if (\n          that._trigger(\n            'change',\n            $.Event('change', { delegatedEvent: e }),\n            data\n          ) !== false\n        ) {\n          that._onAdd(e, data);\n        }\n      });\n    },\n\n    _onPaste: function(e) {\n      var items =\n          e.originalEvent &&\n          e.originalEvent.clipboardData &&\n          e.originalEvent.clipboardData.items,\n        data = { files: [] };\n      if (items && items.length) {\n        $.each(items, function(index, item) {\n          var file = item.getAsFile && item.getAsFile();\n          if (file) {\n            data.files.push(file);\n          }\n        });\n        if (\n          this._trigger(\n            'paste',\n            $.Event('paste', { delegatedEvent: e }),\n            data\n          ) !== false\n        ) {\n          this._onAdd(e, data);\n        }\n      }\n    },\n\n    _onDrop: function(e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var that = this,\n        dataTransfer = e.dataTransfer,\n        data = {};\n      if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n        e.preventDefault();\n        this._getDroppedFiles(dataTransfer).always(function(files) {\n          data.files = files;\n          if (\n            that._trigger(\n              'drop',\n              $.Event('drop', { delegatedEvent: e }),\n              data\n            ) !== false\n          ) {\n            that._onAdd(e, data);\n          }\n        });\n      }\n    },\n\n    _onDragOver: getDragHandler('dragover'),\n\n    _onDragEnter: getDragHandler('dragenter'),\n\n    _onDragLeave: getDragHandler('dragleave'),\n\n    _initEventHandlers: function() {\n      if (this._isXHRUpload(this.options)) {\n        this._on(this.options.dropZone, {\n          dragover: this._onDragOver,\n          drop: this._onDrop,\n          // event.preventDefault() on dragenter is required for IE10+:\n          dragenter: this._onDragEnter,\n          // dragleave is not required, but added for completeness:\n          dragleave: this._onDragLeave\n        });\n        this._on(this.options.pasteZone, {\n          paste: this._onPaste\n        });\n      }\n      if ($.support.fileInput) {\n        this._on(this.options.fileInput, {\n          change: this._onChange\n        });\n      }\n    },\n\n    _destroyEventHandlers: function() {\n      this._off(this.options.dropZone, 'dragenter dragleave dragover drop');\n      this._off(this.options.pasteZone, 'paste');\n      this._off(this.options.fileInput, 'change');\n    },\n\n    _destroy: function() {\n      this._destroyEventHandlers();\n    },\n\n    _setOption: function(key, value) {\n      var reinit = $.inArray(key, this._specialOptions) !== -1;\n      if (reinit) {\n        this._destroyEventHandlers();\n      }\n      this._super(key, value);\n      if (reinit) {\n        this._initSpecialOptions();\n        this._initEventHandlers();\n      }\n    },\n\n    _initSpecialOptions: function() {\n      var options = this.options;\n      if (options.fileInput === undefined) {\n        options.fileInput = this.element.is('input[type=\"file\"]')\n          ? this.element\n          : this.element.find('input[type=\"file\"]');\n      } else if (!(options.fileInput instanceof $)) {\n        options.fileInput = $(options.fileInput);\n      }\n      if (!(options.dropZone instanceof $)) {\n        options.dropZone = $(options.dropZone);\n      }\n      if (!(options.pasteZone instanceof $)) {\n        options.pasteZone = $(options.pasteZone);\n      }\n    },\n\n    _getRegExp: function(str) {\n      var parts = str.split('/'),\n        modifiers = parts.pop();\n      parts.shift();\n      return new RegExp(parts.join('/'), modifiers);\n    },\n\n    _isRegExpOption: function(key, value) {\n      return (\n        key !== 'url' &&\n        $.type(value) === 'string' &&\n        /^\\/.*\\/[igm]{0,3}$/.test(value)\n      );\n    },\n\n    _initDataAttributes: function() {\n      var that = this,\n        options = this.options,\n        data = this.element.data();\n      // Initialize options set via HTML5 data-attributes:\n      $.each(this.element[0].attributes, function(index, attr) {\n        var key = attr.name.toLowerCase(),\n          value;\n        if (/^data-/.test(key)) {\n          // Convert hyphen-ated key to camelCase:\n          key = key.slice(5).replace(/-[a-z]/g, function(str) {\n            return str.charAt(1).toUpperCase();\n          });\n          value = data[key];\n          if (that._isRegExpOption(key, value)) {\n            value = that._getRegExp(value);\n          }\n          options[key] = value;\n        }\n      });\n    },\n\n    _create: function() {\n      this._initDataAttributes();\n      this._initSpecialOptions();\n      this._slots = [];\n      this._sequence = this._getXHRPromise(true);\n      this._sending = this._active = 0;\n      this._initProgressObject(this);\n      this._initEventHandlers();\n    },\n\n    // This method is exposed to the widget API and allows to query\n    // the number of active uploads:\n    active: function() {\n      return this._active;\n    },\n\n    // This method is exposed to the widget API and allows to query\n    // the widget upload progress.\n    // It returns an object with loaded, total and bitrate properties\n    // for the running uploads:\n    progress: function() {\n      return this._progress;\n    },\n\n    // This method is exposed to the widget API and allows adding files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files property and can contain additional options:\n    // .fileupload('add', {files: filesList});\n    add: function(data) {\n      var that = this;\n      if (!data || this.options.disabled) {\n        return;\n      }\n      if (data.fileInput && !data.files) {\n        this._getFileInputFiles(data.fileInput).always(function(files) {\n          data.files = files;\n          that._onAdd(null, data);\n        });\n      } else {\n        data.files = $.makeArray(data.files);\n        this._onAdd(null, data);\n      }\n    },\n\n    // This method is exposed to the widget API and allows sending files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files or fileInput property and can contain additional options:\n    // .fileupload('send', {files: filesList});\n    // The method returns a Promise object for the file upload call.\n    send: function(data) {\n      if (data && !this.options.disabled) {\n        if (data.fileInput && !data.files) {\n          var that = this,\n            dfd = $.Deferred(),\n            promise = dfd.promise(),\n            jqXHR,\n            aborted;\n          promise.abort = function() {\n            aborted = true;\n            if (jqXHR) {\n              return jqXHR.abort();\n            }\n            dfd.reject(null, 'abort', 'abort');\n            return promise;\n          };\n          this._getFileInputFiles(data.fileInput).always(function(files) {\n            if (aborted) {\n              return;\n            }\n            if (!files.length) {\n              dfd.reject();\n              return;\n            }\n            data.files = files;\n            jqXHR = that._onSend(null, data);\n            jqXHR.then(\n              function(result, textStatus, jqXHR) {\n                dfd.resolve(result, textStatus, jqXHR);\n              },\n              function(jqXHR, textStatus, errorThrown) {\n                dfd.reject(jqXHR, textStatus, errorThrown);\n              }\n            );\n          });\n          return this._enhancePromise(promise);\n        }\n        data.files = $.makeArray(data.files);\n        if (data.files.length) {\n          return this._onSend(null, data);\n        }\n      }\n      return this._getXHRPromise(false, data && data.context);\n    }\n  });\n});\n"]}