{"version":3,"sources":["fetch.js"],"names":["self","fetch","Headers","prototype","append","name","value","normalizeName","normalizeValue","list","this","map","push","get","values","getAll","has","hasOwnProperty","set","forEach","callback","thisArg","Object","getOwnPropertyNames","call","support","Blob","e","methods","Body","Request","Response","input","init","request","isPrototypeOf","Promise","resolve","reject","xhr","XMLHttpRequest","onload","status","TypeError","options","statusText","headers","head","getAllResponseHeaders","trim","split","header","key","shift","join","url","responseURL","test","getResponseHeader","body","response","responseText","onerror","open","method","credentials","withCredentials","responseType","setRequestHeader","send","_bodyInit","polyfill","toString","toLowerCase","consumed","bodyUsed","fileReaderReady","reader","result","error","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","Error","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","formData","decode","json","JSON","parse","upcased","toUpperCase","indexOf","normalizeMethod","mode","referrer","form","bytes","replace","decodeURIComponent","bodyInit","type","ok"],"mappings":"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","file":"fetch.js","sourcesContent":["(function() {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = name.toString();\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = value.toString();\n    }\n    return value\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  var support = {\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob();\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (!body) {\n        this._bodyText = ''\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(url, options) {\n    options = options || {}\n    this.url = url\n\n    this.credentials = options.credentials || 'omit'\n    this.headers = new Headers(options.headers)\n    this.method = normalizeMethod(options.method || 'GET')\n    this.mode = options.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && options.body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(options.body)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = xhr.getAllResponseHeaders().trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this._initBody(bodyInit)\n    this.type = 'default'\n    this.url = null\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n  }\n\n  Body.call(Response.prototype)\n\n  self.Headers = Headers;\n  self.Request = Request;\n  self.Response = Response;\n\n  self.fetch = function(input, init) {\n    // TODO: Request constructor should accept input, init\n    var request\n    if (Request.prototype.isPrototypeOf(input) && !init) {\n      request = input\n    } else {\n      request = new Request(input, init)\n    }\n\n    return new Promise(function(resolve, reject) {\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return;\n      }\n\n      xhr.onload = function() {\n        var status = (xhr.status === 1223) ? 204 : xhr.status\n        if (status < 100 || status > 599) {\n          reject(new TypeError('Network request failed'))\n          return\n        }\n        var options = {\n          status: status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})();\n"]}