<?php
/**
 * @link      https://craftcms.com/
 * @copyright Copyright (c) Pixel & Tonic, Inc.
 * @license   https://craftcms.com/license
 */

namespace craft\services;

use Craft;
use craft\helpers\FileHelper;
use craft\helpers\StringHelper;
use yii\base\Exception;
use yii\base\InvalidConfigException;
use yii\base\InvalidParamException;
use yii\helpers\Inflector;

/**
 * Class Security service.
 *
 * An instance of the Security service is globally accessible in Craft via [[Application::security `Craft::$app->getSecurity()`]].
 *
 * @author Pixel & Tonic, Inc. <support@pixelandtonic.com>
 * @since  3.0
 */
class Security extends \yii\base\Security
{
    // Properties
    // =========================================================================

    /**
     * @var string[] Keywords used to reference sensitive data
     * @see redactIfSensitive()
     */
    public $sensitiveKeywords = [
        'key',
        'pass',
        'password',
        'pw',
        'secret',
        'tok',
        'token',
    ];

    /**
     * @var mixed
     */
    private $_blowFishHashCost;

    // Public Methods
    // =========================================================================

    /**
     * @return void
     */
    public function init()
    {
        parent::init();

        $this->_blowFishHashCost = Craft::$app->getConfig()->getGeneral()->blowfishHashCost;
    }

    /**
     * @return int
     */
    public function getMinimumPasswordLength(): int
    {
        return 6;
    }

    /**
     * Hashes a given password with the bcrypt blowfish encryption algorithm.
     *
     * @param string $password      The string to hash
     * @param bool   $validateHash  If you want to validate the just generated hash. Will throw an exception if
     *                              validation fails.
     *
     * @return string The hash.
     */
    public function hashPassword(string $password, bool $validateHash = false): string
    {
        $hash = $this->generatePasswordHash($password, $this->_blowFishHashCost);

        if ($validateHash && !$this->validatePassword($password, $hash)) {
            throw new InvalidParamException('Could not hash the given string.');
        }

        return $hash;
    }

    /**
     * Returns a validtion key unique to this Craft installation. Craft will initially check the 'validationKey'
     * config setting and return that if one has been explicitly set. If not, Craft will generate a cryptographically
     * secure, random key and save it in `craft\storage\validation.key` and serve that on future requests.
     *
     * Note that if this key ever changes, any data that was encrypted with it will not be accessible.
     *
     * @return mixed|string The validation key.
     * @throws Exception if the validation key could not be written
     */
    public function getValidationKey()
    {
        if ($key = Craft::$app->getConfig()->getGeneral()->validationKey) {
            return $key;
        }

        $validationKeyPath = Craft::$app->getPath()->getRuntimePath().DIRECTORY_SEPARATOR.'validation.key';

        if (is_file($validationKeyPath)) {
            return StringHelper::trim(file_get_contents($validationKeyPath));
        }

        if (!FileHelper::isWritable($validationKeyPath)) {
            throw new Exception("Tried to write the validation key to {$validationKeyPath}, but could not.");
        }

        $key = $this->generateRandomString();

        FileHelper::writeToFile($validationKeyPath, $key);

        return $key;
    }

    /**
     * @inheritdoc
     *
     * @param string      $data    the data to be protected
     * @param string|null $key     the secret key to be used for generating hash. Should be a secure
     *                             cryptographic key.
     * @param bool        $rawHash whether the generated hash value is in raw binary format. If false, lowercase
     *                             hex digits will be generated.
     *
     * @return string the data prefixed with the keyed hash
     * @throws Exception if the validation key could not be written
     * @throws InvalidConfigException when HMAC generation fails.
     * @see validateData()
     * @see generateRandomKey()
     * @see hkdf()
     * @see pbkdf2()
     */
    public function hashData($data, $key = null, $rawHash = false): string
    {
        if ($key === null) {
            $key = $this->getValidationKey();
        }

        return parent::hashData($data, $key, $rawHash);
    }

    /**
     * @inheritdoc
     *
     * @param string      $data    the data to be validated. The data must be previously
     *                             generated by [[hashData()]].
     * @param string|null $key     the secret key that was previously used to generate the hash for the data in [[hashData()]].
     *                             function to see the supported hashing algorithms on your system. This must be the same
     *                             as the value passed to [[hashData()]] when generating the hash for the data.
     * @param bool        $rawHash this should take the same value as when you generate the data using [[hashData()]].
     *                             It indicates whether the hash value in the data is in binary format. If false, it means the hash value consists
     *                             of lowercase hex digits only.
     *                             hex digits will be generated.
     *
     * @return string the real data with the hash stripped off. False if the data is tampered.
     * @throws Exception if the validation key could not be written
     * @throws InvalidConfigException when HMAC generation fails.
     * @see hashData()
     */
    public function validateData($data, $key = null, $rawHash = false): string
    {
        if ($key === null) {
            $key = $this->getValidationKey();
        }

        return parent::validateData($data, $key, $rawHash);
    }

    /**
     * Checks the given key to see if it looks like it contains sensitive info, and if so, redacts the given value.
     *
     * @param string $name
     * @param string|array $value
     *
     * @return string|array The possibly-redacted value
     */
    public function redactIfSensitive(string $name, $value)
    {
        if (is_array($value)) {
            foreach ($value as $n => &$v) {
                $v = $this->redactIfSensitive($n, $v);
            }
        } else if (
            is_string($value) &&
            preg_match('/\b('.implode('|', $this->sensitiveKeywords).')\b/', Inflector::camel2words($name, false))
        ) {
            $value = str_repeat('â€¢', strlen($value));
        }

        return $value;
    }
}
