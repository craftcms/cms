{"version":3,"file":"MatrixInput.js","mappings":"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","sources":["webpack:///./MatrixInput.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  /**\n   * Matrix input class\n   */\n  Craft.MatrixInput = Garnish.Base.extend(\n    {\n      id: null,\n      entryTypes: null,\n      entryTypesByHandle: null,\n      inputNamePrefix: null,\n      inputIdPrefix: null,\n\n      showingAddEntryMenu: false,\n      addEntryBtnGroupWidth: null,\n      addEntryBtnContainerWidth: null,\n\n      $container: null,\n      $form: null,\n      $entriesContainer: null,\n      $addEntryBtnContainer: null,\n      $addEntryBtnGroup: null,\n      $addEntryBtnGroupBtns: null,\n      $addEntryMenuBtn: null,\n      $statusMessage: null,\n\n      entrySort: null,\n      entrySelect: null,\n\n      addingEntry: false,\n\n      init: function (id, entryTypes, inputNamePrefix, settings) {\n        this.id = id;\n        this.entryTypes = entryTypes;\n        this.inputNamePrefix = inputNamePrefix;\n        this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n        // see if settings was actually set to the maxEntriesvalue\n        if (typeof settings === 'number') {\n          settings = {maxEntries: settings};\n        }\n        this.setSettings(settings, Craft.MatrixInput.defaults);\n\n        this.$container = $('#' + this.id);\n        this.$form = this.$container.closest('form');\n        this.$entriesContainer = this.$container.children('.blocks');\n        this.$addEntryBtnContainer = this.$container.children('.buttons');\n        this.$addEntryBtnGroup =\n          this.$addEntryBtnContainer.children('.btngroup');\n        this.$addEntryBtnGroupBtns = this.$addEntryBtnGroup.children('.btn');\n        this.$addEntryMenuBtn = this.$addEntryBtnContainer.children('.menubtn');\n        this.$statusMessage = this.$container.find('[data-status-message]');\n\n        this.$container.data('matrix', this);\n\n        this.setNewEntryBtn();\n\n        this.entryTypesByHandle = {};\n\n        for (let i = 0; i < this.entryTypes.length; i++) {\n          const entryType = this.entryTypes[i];\n          this.entryTypesByHandle[entryType.handle] = entryType;\n        }\n\n        const $entries = this.$entriesContainer.children();\n        const collapsedEntries = Craft.MatrixInput.getCollapsedEntryIds();\n\n        this.entrySort = new Garnish.DragSort($entries, {\n          handle: '> .actions > .move',\n          axis: 'y',\n          filter: () => {\n            // Only return all the selected items if the target item is selected\n            if (this.entrySort.$targetItem.hasClass('sel')) {\n              return this.entrySelect.getSelectedItems();\n            } else {\n              return this.entrySort.$targetItem;\n            }\n          },\n          collapseDraggees: true,\n          magnetStrength: 4,\n          helperLagBase: 1.5,\n          helperOpacity: 0.9,\n          onDragStop: () => {\n            this.trigger('entrySortDragStop');\n          },\n          onSortChange: () => {\n            this.entrySelect.resetItemOrder();\n          },\n        });\n\n        this.entrySelect = new Garnish.Select(\n          this.$entriesContainer,\n          $entries,\n          {\n            multi: true,\n            vertical: true,\n            handle: '> .checkbox, > .titlebar',\n            checkboxMode: true,\n          }\n        );\n\n        for (let i = 0; i < $entries.length; i++) {\n          const $entry = $($entries[i]);\n          const entry = new Entry(this, $entry);\n\n          if (entry.id && $.inArray('' + entry.id, collapsedEntries) !== -1) {\n            entry.collapse();\n          }\n        }\n\n        this.addListener(this.$addEntryBtnGroupBtns, 'click', function (ev) {\n          const $button = $(ev.currentTarget).addClass('loading');\n          this.addEntry($button.data('type')).then(() => {\n            $button.removeClass('loading');\n          });\n        });\n\n        if (this.$addEntryMenuBtn.length) {\n          this.$addEntryMenuBtn.menubtn();\n          this.$addEntryMenuBtn.data('menubtn').on('optionSelect', (ev) => {\n            this.$addEntryMenuBtn.addClass('loading');\n            this.addEntry($(ev.option).data('type')).then(() => {\n              this.$addEntryMenuBtn.removeClass('loading');\n            });\n          });\n        }\n\n        this.updateAddEntryBtn();\n\n        this.addListener(this.$container, 'resize', 'setNewEntryBtn');\n        Garnish.$doc.ready(this.setNewEntryBtn.bind(this));\n\n        this.trigger('afterInit');\n      },\n\n      setNewEntryBtn: function () {\n        // Do we know what the button group width is yet?\n        if (!this.addEntryBtnGroupWidth) {\n          this.addEntryBtnGroupWidth = this.$addEntryBtnGroup.width();\n\n          if (!this.addEntryBtnGroupWidth) {\n            return;\n          }\n        }\n\n        // Only check if the container width has resized\n        if (\n          this.addEntryBtnContainerWidth !==\n          (this.addEntryBtnContainerWidth = this.$addEntryBtnContainer.width())\n        ) {\n          if (this.addEntryBtnGroupWidth > this.addEntryBtnContainerWidth) {\n            if (!this.showingAddEntryMenu) {\n              this.$addEntryBtnGroup.addClass('hidden');\n              this.$addEntryMenuBtn.removeClass('hidden');\n              this.showingAddEntryMenu = true;\n            }\n          } else {\n            if (this.showingAddEntryMenu) {\n              this.$addEntryMenuBtn.addClass('hidden');\n              this.$addEntryBtnGroup.removeClass('hidden');\n              this.showingAddEntryMenu = false;\n\n              // Because Safari is awesome\n              if (navigator.userAgent.indexOf('Safari') !== -1) {\n                Garnish.requestAnimationFrame(() => {\n                  this.$addEntryBtnGroup.css('opacity', 0.99);\n\n                  Garnish.requestAnimationFrame(() => {\n                    this.$addEntryBtnGroup.css('opacity', '');\n                  });\n                });\n              }\n            }\n          }\n        }\n      },\n\n      canAddMoreEntries: function () {\n        return (\n          !this.maxEntries ||\n          this.$entriesContainer.children().length < this.maxEntries\n        );\n      },\n\n      updateAddEntryBtn: function () {\n        if (this.canAddMoreEntries()) {\n          this.$addEntryBtnGroup.removeClass('disabled');\n          this.$addEntryMenuBtn.removeClass('disabled');\n\n          this.$addEntryBtnGroupBtns.each(function () {\n            $(this).removeAttr('aria-disabled');\n          });\n\n          for (let i = 0; i < this.entrySelect.$items.length; i++) {\n            const entry = this.entrySelect.$items.eq(i).data('entry');\n\n            if (entry) {\n              entry.$actionMenu\n                .find('a[data-action=add]')\n                .parent()\n                .removeClass('disabled');\n              entry.$actionMenu\n                .find('a[data-action=add]')\n                .removeAttr('aria-disabled');\n            }\n          }\n        } else {\n          this.$addEntryBtnGroup.addClass('disabled');\n          this.$addEntryMenuBtn.addClass('disabled');\n\n          this.$addEntryBtnGroupBtns.each(function () {\n            $(this).attr('aria-disabled', 'true');\n          });\n\n          for (let i = 0; i < this.entrySelect.$items.length; i++) {\n            const entry = this.entrySelect.$items.eq(i).data('entry');\n\n            if (entry) {\n              entry.$actionMenu\n                .find('a[data-action=add]')\n                .parent()\n                .addClass('disabled');\n              entry.$actionMenu\n                .find('a[data-action=add]')\n                .attr('aria-disabled', 'true');\n            }\n          }\n        }\n      },\n\n      updateStatusMessage: function () {\n        this.$statusMessage.empty();\n        let message;\n\n        if (!this.canAddMoreEntries()) {\n          message = Craft.t(\n            'app',\n            'Entry could not be added. Maximum number of entries reached.'\n          );\n        }\n\n        setTimeout(() => {\n          this.$statusMessage.text(message);\n        }, 250);\n      },\n\n      addEntry: async function (type, $insertBefore, autofocus) {\n        if (this.addingEntry) {\n          // only one new entry at a time\n          return;\n        }\n\n        if (!this.canAddMoreEntries()) {\n          this.updateStatusMessage();\n          return;\n        }\n\n        this.addingEntry = true;\n\n        const {data} = await Craft.sendActionRequest(\n          'POST',\n          'matrix/render-block',\n          {\n            data: {\n              fieldId: this.settings.fieldId,\n              entryTypeId: this.entryTypesByHandle[type].id,\n              ownerId: this.settings.ownerId,\n              ownerElementType: this.settings.ownerElementType,\n              siteId: this.settings.siteId,\n              namespace: this.settings.namespace,\n            },\n          }\n        );\n\n        const $entry = $(data.blockHtml);\n\n        // Pause the draft editor\n        const elementEditor = this.$form.data('elementEditor');\n        if (elementEditor) {\n          elementEditor.pause();\n        }\n\n        if ($insertBefore) {\n          $entry.insertBefore($insertBefore);\n        } else {\n          $entry.appendTo(this.$entriesContainer);\n        }\n\n        this.trigger('entryAdded', {\n          $entry: $entry,\n        });\n\n        // Animate the entry into position\n        $entry.css(this.getHiddenEntryCss($entry)).velocity(\n          {\n            opacity: 1,\n            'margin-bottom': 10,\n          },\n          'fast',\n          () => {\n            $entry.css('margin-bottom', '');\n            Craft.initUiElements($entry.children('.fields'));\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendBodyHtml(data.bodyHtml);\n            new Entry(this, $entry);\n            this.entrySort.addItems($entry);\n            this.entrySelect.addItems($entry);\n            this.updateAddEntryBtn();\n\n            Garnish.requestAnimationFrame(() => {\n              if (typeof autofocus === 'undefined' || autofocus) {\n                // Scroll to the entry\n                Garnish.scrollContainerToElement($entry);\n                // Focus on the first focusable element\n                $entry.find('.flex-fields :focusable').first().trigger('focus');\n              }\n\n              // Resume the draft editor\n              if (elementEditor) {\n                elementEditor.resume();\n              }\n            });\n          }\n        );\n\n        this.addingEntry = false;\n      },\n\n      getEntryTypeByHandle: function (handle) {\n        for (let i = 0; i < this.entryTypes.length; i++) {\n          if (this.entryTypes[i].handle === handle) {\n            return this.entryTypes[i];\n          }\n        }\n      },\n\n      collapseSelectedEntries: function () {\n        this.callOnSelectedEntries('collapse');\n      },\n\n      expandSelectedEntries: function () {\n        this.callOnSelectedEntries('expand');\n      },\n\n      disableSelectedEntries: function () {\n        this.callOnSelectedEntries('disable');\n      },\n\n      enableSelectedEntries: function () {\n        this.callOnSelectedEntries('enable');\n      },\n\n      deleteSelectedEntries: function () {\n        this.callOnSelectedEntries('selfDestruct');\n      },\n\n      callOnSelectedEntries: function (fn) {\n        for (let i = 0; i < this.entrySelect.$selectedItems.length; i++) {\n          this.entrySelect.$selectedItems.eq(i).data('entry')[fn]();\n        }\n      },\n\n      getHiddenEntryCss: function ($entry) {\n        return {\n          opacity: 0,\n          marginBottom: -$entry.outerHeight(),\n        };\n      },\n\n      get maxEntries() {\n        return this.settings.maxEntries;\n      },\n    },\n    {\n      defaults: {\n        fieldId: null,\n        maxEntries: null,\n        namespace: null,\n        ownerElementType: null,\n        ownerId: null,\n        siteId: null,\n        staticEntries: false,\n      },\n\n      collapsedEntryStorageKey:\n        'Craft-' + Craft.systemUid + '.MatrixInput.collapsedEntries',\n\n      getCollapsedEntryIds: function () {\n        if (\n          typeof localStorage[Craft.MatrixInput.collapsedEntryStorageKey] ===\n          'string'\n        ) {\n          return Craft.filterArray(\n            localStorage[Craft.MatrixInput.collapsedEntryStorageKey].split(',')\n          );\n        } else {\n          return [];\n        }\n      },\n\n      setCollapsedEntryIds: function (ids) {\n        localStorage[Craft.MatrixInput.collapsedEntryStorageKey] =\n          ids.join(',');\n      },\n\n      rememberCollapsedEntryId: function (id) {\n        if (typeof Storage !== 'undefined') {\n          const collapsedEntries = Craft.MatrixInput.getCollapsedEntryIds();\n\n          if ($.inArray('' + id, collapsedEntries) === -1) {\n            collapsedEntries.push(id);\n            Craft.MatrixInput.setCollapsedEntryIds(collapsedEntries);\n          }\n        }\n      },\n\n      forgetCollapsedEntryId: function (id) {\n        if (typeof Storage !== 'undefined') {\n          const collapsedEntries = Craft.MatrixInput.getCollapsedEntryIds();\n          const collapsedEntriesIndex = $.inArray('' + id, collapsedEntries);\n\n          if (collapsedEntriesIndex !== -1) {\n            collapsedEntries.splice(collapsedEntriesIndex, 1);\n            Craft.MatrixInput.setCollapsedEntryIds(collapsedEntries);\n          }\n        }\n      },\n    }\n  );\n\n  const Entry = Garnish.Base.extend({\n    matrix: null,\n    $container: null,\n    $titlebar: null,\n    $fieldsContainer: null,\n    $previewContainer: null,\n    $actionMenu: null,\n    $collapsedInput: null,\n\n    actionDisclosure: null,\n\n    isNew: null,\n    id: null,\n\n    collapsed: false,\n\n    init: function (matrix, $container) {\n      this.matrix = matrix;\n      this.$container = $container;\n      this.$titlebar = $container.children('.titlebar');\n      this.$previewContainer = this.$titlebar.children('.preview');\n      this.$fieldsContainer = $container.children('.fields');\n\n      this.$container.data('entry', this);\n\n      this.id = this.$container.data('id');\n      this.isNew =\n        !this.id ||\n        (typeof this.id === 'string' && this.id.substring(0, 3) === 'new');\n\n      const $actionMenuBtn = this.$container.find(\n        '> .actions [data-disclosure-trigger]'\n      );\n      const actionDisclosure =\n        $actionMenuBtn.data('trigger') ||\n        new Garnish.DisclosureMenu($actionMenuBtn);\n\n      this.$actionMenu = actionDisclosure.$container;\n      this.actionDisclosure = actionDisclosure;\n\n      actionDisclosure.on('show', () => {\n        this.$container.addClass('active');\n        if (this.$container.prev('.matrixblock').length) {\n          this.$actionMenu\n            .find('a[data-action=moveUp]:first')\n            .parent()\n            .removeClass('hidden');\n        } else {\n          this.$actionMenu\n            .find('a[data-action=moveUp]:first')\n            .parent()\n            .addClass('hidden');\n        }\n        if (this.$container.next('.matrixblock').length) {\n          this.$actionMenu\n            .find('a[data-action=moveDown]:first')\n            .parent()\n            .removeClass('hidden');\n        } else {\n          this.$actionMenu\n            .find('a[data-action=moveDown]:first')\n            .parent()\n            .addClass('hidden');\n        }\n      });\n\n      actionDisclosure.on('hide', () => {\n        this.$container.removeClass('active');\n      });\n\n      this.$actionMenuOptions = this.$actionMenu.find('a[data-action]');\n\n      this.addListener(\n        this.$actionMenuOptions,\n        'click',\n        this.handleActionClick\n      );\n      this.addListener(\n        this.$actionMenuOptions,\n        'keydown',\n        this.handleActionKeydown\n      );\n\n      // Was this entry already collapsed?\n      if (Garnish.hasAttr(this.$container, 'data-collapsed')) {\n        this.collapse();\n      }\n\n      this._handleTitleBarClick = function (ev) {\n        ev.preventDefault();\n        this.toggle();\n      };\n\n      this.addListener(this.$titlebar, 'doubletap', this._handleTitleBarClick);\n    },\n\n    toggle: function () {\n      if (this.collapsed) {\n        this.expand();\n      } else {\n        this.collapse(true);\n      }\n    },\n\n    collapse: function (animate) {\n      if (this.collapsed) {\n        return;\n      }\n\n      this.$container.addClass('collapsed');\n\n      let previewHtml = '';\n      const $fields = this.$fieldsContainer.children().children();\n\n      for (let i = 0; i < $fields.length; i++) {\n        const $field = $($fields[i]);\n        const $inputs = $field\n          .children('.input')\n          .find('select,input[type!=\"hidden\"],textarea,.label');\n        let inputPreviewText = '';\n\n        for (let j = 0; j < $inputs.length; j++) {\n          const $input = $($inputs[j]);\n          let value;\n\n          if ($input.hasClass('label')) {\n            const $maybeLightswitchContainer = $input.parent().parent();\n\n            if (\n              $maybeLightswitchContainer.hasClass('lightswitch') &&\n              (($maybeLightswitchContainer.hasClass('on') &&\n                $input.hasClass('off')) ||\n                (!$maybeLightswitchContainer.hasClass('on') &&\n                  $input.hasClass('on')))\n            ) {\n              continue;\n            }\n\n            value = $input.text();\n          } else {\n            value = Craft.getText(this._inputPreviewText($input));\n          }\n\n          if (Array.isArray(value)) {\n            value = value.join(', ');\n          }\n\n          if (value) {\n            value = Craft.escapeHtml(value).trim();\n\n            if (value) {\n              if (inputPreviewText) {\n                inputPreviewText += ', ';\n              }\n\n              inputPreviewText += value;\n            }\n          }\n        }\n\n        if (inputPreviewText) {\n          previewHtml +=\n            (previewHtml ? ' <span>|</span> ' : '') + inputPreviewText;\n        }\n      }\n\n      this.$previewContainer.html(previewHtml);\n\n      this.$fieldsContainer.velocity('stop');\n      this.$container.velocity('stop');\n\n      if (animate && !Garnish.prefersReducedMotion()) {\n        this.$fieldsContainer.velocity('fadeOut', {duration: 'fast'});\n        this.$container.velocity({height: 32}, 'fast');\n      } else {\n        this.$previewContainer.show();\n        this.$fieldsContainer.hide();\n        this.$container.css({height: 32});\n      }\n\n      setTimeout(() => {\n        this.$actionMenu\n          .find('a[data-action=collapse]:first')\n          .parent()\n          .addClass('hidden');\n        this.$actionMenu\n          .find('a[data-action=expand]:first')\n          .parent()\n          .removeClass('hidden');\n      }, 200);\n\n      // Remember that?\n      if (!this.isNew) {\n        Craft.MatrixInput.rememberCollapsedEntryId(this.id);\n      } else {\n        if (!this.$collapsedInput) {\n          this.$collapsedInput = $(\n            '<input type=\"hidden\" name=\"' +\n              this.matrix.inputNamePrefix +\n              '[entries][' +\n              this.id +\n              '][collapsed]\" value=\"1\"/>'\n          ).appendTo(this.$container);\n        } else {\n          this.$collapsedInput.val('1');\n        }\n      }\n\n      this.collapsed = true;\n    },\n\n    _inputPreviewText: function ($input) {\n      if ($input.is('select,multiselect')) {\n        const labels = [];\n        const $options = $input.find('option:selected');\n        for (let k = 0; k < $options.length; k++) {\n          labels.push($options.eq(k).text());\n        }\n        return labels;\n      }\n\n      if (\n        $input.is('input[type=\"checkbox\"]:checked,input[type=\"radio\"]:checked')\n      ) {\n        const id = $input.attr('id');\n        const $label = $(`label[for=\"${id}\"]`);\n        if ($label.length) {\n          return $label.text();\n        }\n      }\n\n      return Garnish.getInputPostVal($input);\n    },\n\n    expand: function () {\n      if (!this.collapsed) {\n        return;\n      }\n\n      this.$container.removeClass('collapsed');\n\n      this.$fieldsContainer.velocity('stop');\n      this.$container.velocity('stop');\n\n      const collapsedContainerHeight = this.$container.height();\n      this.$container.height('auto');\n      this.$fieldsContainer.show();\n      const expandedContainerHeight = this.$container.height();\n      const displayValue = this.$fieldsContainer.css('display') || 'block';\n      this.$container.height(collapsedContainerHeight);\n      this.$fieldsContainer\n        .hide()\n        .velocity('fadeIn', {duration: 'fast', display: displayValue});\n\n      const animationDuration = Garnish.prefersReducedMotion() ? 0 : 'fast';\n      this.$container.velocity(\n        {height: expandedContainerHeight},\n        animationDuration,\n        () => {\n          this.$previewContainer.html('');\n          this.$container.height('auto');\n          this.$container.trigger('scroll');\n        }\n      );\n\n      setTimeout(() => {\n        this.$actionMenu\n          .find('a[data-action=collapse]:first')\n          .parent()\n          .removeClass('hidden');\n        this.$actionMenu\n          .find('a[data-action=expand]:first')\n          .parent()\n          .addClass('hidden');\n      }, 200);\n\n      // Remember that?\n      if (!this.isNew && typeof Storage !== 'undefined') {\n        const collapsedEntries = Craft.MatrixInput.getCollapsedEntryIds();\n        const collapsedEntriesIndex = $.inArray('' + this.id, collapsedEntries);\n\n        if (collapsedEntriesIndex !== -1) {\n          collapsedEntries.splice(collapsedEntriesIndex, 1);\n          Craft.MatrixInput.setCollapsedEntryIds(collapsedEntries);\n        }\n      }\n\n      if (!this.isNew) {\n        Craft.MatrixInput.forgetCollapsedEntryId(this.id);\n      } else if (this.$collapsedInput) {\n        this.$collapsedInput.val('');\n      }\n\n      this.collapsed = false;\n    },\n\n    disable: function () {\n      this.$container.children('input[name$=\"[enabled]\"]:first').val('');\n      this.$container.addClass('disabled-entry');\n\n      setTimeout(() => {\n        this.$actionMenu\n          .find('a[data-action=disable]:first')\n          .parent()\n          .addClass('hidden');\n        this.$actionMenu\n          .find('a[data-action=enable]:first')\n          .parent()\n          .removeClass('hidden');\n      }, 200);\n\n      this.collapse(true);\n    },\n\n    enable: function () {\n      this.$container.children('input[name$=\"[enabled]\"]:first').val('1');\n      this.$container.removeClass('disabled-entry');\n\n      setTimeout(() => {\n        this.$actionMenu\n          .find('a[data-action=disable]:first')\n          .parent()\n          .removeClass('hidden');\n        this.$actionMenu\n          .find('a[data-action=enable]:first')\n          .parent()\n          .addClass('hidden');\n      }, 200);\n    },\n\n    moveUp: function () {\n      this.matrix.trigger('beforeMoveEntryUp', {\n        entry: this,\n      });\n      let $prev = this.$container.prev('.matrixblock');\n      if ($prev.length) {\n        this.$container.insertBefore($prev);\n        this.matrix.entrySelect.resetItemOrder();\n      }\n      this.matrix.trigger('moveEntryUp', {\n        entry: this,\n      });\n    },\n\n    moveDown: function () {\n      this.matrix.trigger('beforeMoveEntryDown', {\n        entry: this,\n      });\n      let $next = this.$container.next('.matrixblock');\n      if ($next.length) {\n        this.$container.insertAfter($next);\n        this.matrix.entrySelect.resetItemOrder();\n      }\n      this.matrix.trigger('moveEntryDown', {\n        entry: this,\n      });\n    },\n\n    handleActionClick: function (event) {\n      event.preventDefault();\n      this.onActionSelect(event.target);\n    },\n\n    handleActionKeydown: function (event) {\n      const keyCode = event.keyCode;\n\n      if (keyCode !== Garnish.SPACE_KEY) return;\n\n      event.preventDefault();\n      this.onActionSelect(event.target);\n    },\n\n    onActionSelect: function (option) {\n      const batchAction =\n          this.matrix.entrySelect.totalSelected > 1 &&\n          this.matrix.entrySelect.isSelected(this.$container),\n        $option = $(option);\n\n      switch ($option.data('action')) {\n        case 'collapse': {\n          if (batchAction) {\n            this.matrix.collapseSelectedEntries();\n          } else {\n            this.collapse(true);\n          }\n\n          break;\n        }\n\n        case 'expand': {\n          if (batchAction) {\n            this.matrix.expandSelectedEntries();\n          } else {\n            this.expand();\n          }\n\n          break;\n        }\n\n        case 'disable': {\n          if (batchAction) {\n            this.matrix.disableSelectedEntries();\n          } else {\n            this.disable();\n          }\n\n          break;\n        }\n\n        case 'enable': {\n          if (batchAction) {\n            this.matrix.enableSelectedEntries();\n          } else {\n            this.enable();\n            this.expand();\n          }\n\n          break;\n        }\n\n        case 'moveUp': {\n          this.moveUp();\n          break;\n        }\n\n        case 'moveDown': {\n          this.moveDown();\n          break;\n        }\n\n        case 'add': {\n          const type = $option.data('type');\n          this.matrix.addEntry(type, this.$container);\n          break;\n        }\n\n        case 'delete': {\n          if (batchAction) {\n            if (\n              confirm(\n                Craft.t(\n                  'app',\n                  'Are you sure you want to delete the selected entries?'\n                )\n              )\n            ) {\n              this.matrix.deleteSelectedEntries();\n            }\n          } else {\n            this.selfDestruct();\n          }\n\n          break;\n        }\n      }\n\n      this.actionDisclosure.hide();\n    },\n\n    selfDestruct: function () {\n      // Remove any inputs from the form data\n      $('[name]', this.$container).removeAttr('name');\n\n      this.$container.velocity(\n        this.matrix.getHiddenEntryCss(this.$container),\n        'fast',\n        () => {\n          this.$container.remove();\n          this.matrix.updateAddEntryBtn();\n\n          this.matrix.trigger('entryDeleted', {\n            $entry: this.$container,\n          });\n        }\n      );\n    },\n  });\n})(jQuery);\n"],"names":["$","Craft","MatrixInput","Garnish","Base","extend","id","entryTypes","entryTypesByHandle","inputNamePrefix","inputIdPrefix","showingAddEntryMenu","addEntryBtnGroupWidth","addEntryBtnContainerWidth","$container","$form","$entriesContainer","$addEntryBtnContainer","$addEntryBtnGroup","$addEntryBtnGroupBtns","$addEntryMenuBtn","$statusMessage","entrySort","entrySelect","addingEntry","init","settings","this","formatInputId","maxEntries","setSettings","defaults","closest","children","find","data","setNewEntryBtn","i","length","entryType","handle","$entries","collapsedEntries","getCollapsedEntryIds","DragSort","axis","filter","$targetItem","hasClass","getSelectedItems","collapseDraggees","magnetStrength","helperLagBase","helperOpacity","onDragStop","trigger","onSortChange","resetItemOrder","Select","multi","vertical","checkboxMode","$entry","entry","Entry","inArray","collapse","addListener","ev","$button","currentTarget","addClass","addEntry","then","removeClass","menubtn","on","option","updateAddEntryBtn","$doc","ready","bind","width","navigator","userAgent","indexOf","requestAnimationFrame","css","canAddMoreEntries","each","removeAttr","$items","eq","$actionMenu","parent","attr","updateStatusMessage","message","empty","t","setTimeout","text","type","$insertBefore","autofocus","sendActionRequest","fieldId","entryTypeId","ownerId","ownerElementType","siteId","namespace","blockHtml","elementEditor","pause","insertBefore","appendTo","getHiddenEntryCss","velocity","opacity","initUiElements","appendHeadHtml","headHtml","appendBodyHtml","bodyHtml","addItems","scrollContainerToElement","first","resume","getEntryTypeByHandle","collapseSelectedEntries","callOnSelectedEntries","expandSelectedEntries","disableSelectedEntries","enableSelectedEntries","deleteSelectedEntries","fn","$selectedItems","marginBottom","outerHeight","staticEntries","collapsedEntryStorageKey","systemUid","localStorage","filterArray","split","setCollapsedEntryIds","ids","join","rememberCollapsedEntryId","Storage","push","forgetCollapsedEntryId","collapsedEntriesIndex","splice","matrix","$titlebar","$fieldsContainer","$previewContainer","$collapsedInput","actionDisclosure","isNew","collapsed","substring","$actionMenuBtn","DisclosureMenu","prev","next","$actionMenuOptions","handleActionClick","handleActionKeydown","hasAttr","_handleTitleBarClick","preventDefault","toggle","expand","animate","previewHtml","$fields","$inputs","inputPreviewText","j","$input","value","$maybeLightswitchContainer","getText","_inputPreviewText","Array","isArray","escapeHtml","trim","html","prefersReducedMotion","duration","height","show","hide","val","is","labels","$options","k","$label","getInputPostVal","collapsedContainerHeight","expandedContainerHeight","displayValue","display","animationDuration","disable","enable","moveUp","$prev","moveDown","$next","insertAfter","event","onActionSelect","target","keyCode","SPACE_KEY","batchAction","totalSelected","isSelected","$option","confirm","selfDestruct","remove","jQuery"],"sourceRoot":""}