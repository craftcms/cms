{"version":3,"file":"DbBackupUtility.js","mappings":"YAAA,IAAWA,IAgHRC,OA/GDC,MAAMC,gBAAkBC,QAAQC,KAAKC,OAAO,CAC1CC,SAAU,KACVC,MAAO,KAEPC,KAAM,SAAUC,GACdC,KAAKH,MAAQR,EAAE,IAAMU,GACrBC,KAAKJ,SAAWP,EAAE,eAAgBW,KAAKH,OACvCG,KAAKC,QAAUZ,EAAE,kBAAmBW,KAAKH,OAEzCG,KAAKE,YAAYF,KAAKH,MAAO,SAAU,WACzC,EAEAM,SAAU,SAAUC,GAAI,WACtBA,EAAGC,iBAEEL,KAAKJ,SAASU,SAAS,cACrBN,KAAKO,YAGRP,KAAKO,YAAYC,mBAFjBR,KAAKO,YAAc,IAAIhB,MAAMkB,YAAYT,KAAKC,SAKhDD,KAAKO,YAAYG,aAAaC,YAAY,UAE1CX,KAAKO,YAAYG,aAAaE,SAAS,QAAQA,SAC7C,CACEC,QAAS,GAEX,CACEC,SAAU,WACJzB,EAAE,oBAAoB0B,KAAK,WAC7BxB,MAAMyB,gBACJ,OACAzB,MAAM0B,aAAa,sCACnB,EAAKpB,MAAMqB,aAEVC,MAAK,WACJ,EAAKC,oBACLC,WAAW,EAAKC,WAAWC,KAAK,GAAO,IACzC,IAAE,OACK,WACLhC,MAAMiC,GAAGC,aACPlC,MAAMmC,EACJ,MACA,+EAGJ,EAAKJ,YAAW,EAClB,IAEF/B,MAAMoC,kBACJ,OACA,sCAECR,MAAK,SAACS,GACL,EAAKR,oBACLC,WAAW,EAAKC,WAAWC,KAAK,GAAO,IACzC,IAAE,OACK,YAAU,EAARK,SACP,EAAKR,oBACL7B,MAAMiC,GAAGC,aACPlC,MAAMmC,EACJ,MACA,+EAGJ,EAAKJ,YAAW,EAClB,GAEN,IAIAtB,KAAK6B,UACP7B,KAAK6B,SAASC,IAAI,UAAW,GAG/B9B,KAAKJ,SAASmC,SAAS,YACvB/B,KAAKJ,SAASoC,QAAQ,QAE1B,EAEAZ,kBAAmB,WAEjBpB,KAAKO,YAAY0B,sBADL,IAEd,EAEAX,WAAY,SAAUY,GAAa,WAC5BlC,KAAK6B,WACR7B,KAAK6B,SAAWxC,EAAE,4CAA4C8C,SAC5DnC,KAAKC,SAEPD,KAAK6B,SAASC,IAAI,UAAW,IAG/B9B,KAAKO,YAAYG,aAAaE,SAC5B,CAACC,QAAS,GACV,CACEuB,SAAU,OACVtB,SAAU,gBACmB,IAAhBoB,IAA+C,IAAhBA,GACxC,EAAKL,SAASjB,SAAS,CAACC,QAAS,GAAI,CAACuB,SAAU,SAGlD,EAAKxC,SAASe,YAAY,YAC1B,EAAKf,SAASoC,QAAQ,QACxB,GAGN,G","sources":["webpack:///./DbBackupUtility.js"],"sourcesContent":["(function ($) {\n  Craft.DbBackupUtility = Garnish.Base.extend({\n    $trigger: null,\n    $form: null,\n\n    init: function (formId) {\n      this.$form = $('#' + formId);\n      this.$trigger = $('input.submit', this.$form);\n      this.$status = $('.utility-status', this.$form);\n\n      this.addListener(this.$form, 'submit', 'onSubmit');\n    },\n\n    onSubmit: function (ev) {\n      ev.preventDefault();\n\n      if (!this.$trigger.hasClass('disabled')) {\n        if (!this.progressBar) {\n          this.progressBar = new Craft.ProgressBar(this.$status);\n        } else {\n          this.progressBar.resetProgressBar();\n        }\n\n        this.progressBar.$progressBar.removeClass('hidden');\n\n        this.progressBar.$progressBar.velocity('stop').velocity(\n          {\n            opacity: 1,\n          },\n          {\n            complete: () => {\n              if ($('#download-backup').prop('checked')) {\n                Craft.downloadFromUrl(\n                  'POST',\n                  Craft.getActionUrl('utilities/db-backup-perform-action'),\n                  this.$form.serialize()\n                )\n                  .then(() => {\n                    this.updateProgressBar();\n                    setTimeout(this.onComplete.bind(this), 300);\n                  })\n                  .catch(() => {\n                    Craft.cp.displayError(\n                      Craft.t(\n                        'app',\n                        'There was a problem backing up your database. Please check the Craft logs.'\n                      )\n                    );\n                    this.onComplete(false);\n                  });\n              } else {\n                Craft.sendActionRequest(\n                  'POST',\n                  'utilities/db-backup-perform-action'\n                )\n                  .then((response) => {\n                    this.updateProgressBar();\n                    setTimeout(this.onComplete.bind(this), 300);\n                  })\n                  .catch(({response}) => {\n                    this.updateProgressBar();\n                    Craft.cp.displayError(\n                      Craft.t(\n                        'app',\n                        'There was a problem backing up your database. Please check the Craft logs.'\n                      )\n                    );\n                    this.onComplete(false);\n                  });\n              }\n            },\n          }\n        );\n\n        if (this.$allDone) {\n          this.$allDone.css('opacity', 0);\n        }\n\n        this.$trigger.addClass('disabled');\n        this.$trigger.trigger('blur');\n      }\n    },\n\n    updateProgressBar: function () {\n      var width = 100;\n      this.progressBar.setProgressPercentage(width);\n    },\n\n    onComplete: function (showAllDone) {\n      if (!this.$allDone) {\n        this.$allDone = $('<div class=\"alldone\" data-icon=\"done\" />').appendTo(\n          this.$status\n        );\n        this.$allDone.css('opacity', 0);\n      }\n\n      this.progressBar.$progressBar.velocity(\n        {opacity: 0},\n        {\n          duration: 'fast',\n          complete: () => {\n            if (typeof showAllDone === 'undefined' || showAllDone === true) {\n              this.$allDone.velocity({opacity: 1}, {duration: 'fast'});\n            }\n\n            this.$trigger.removeClass('disabled');\n            this.$trigger.trigger('focus');\n          },\n        }\n      );\n    },\n  });\n})(jQuery);\n"],"names":["$","jQuery","Craft","DbBackupUtility","Garnish","Base","extend","$trigger","$form","init","formId","this","$status","addListener","onSubmit","ev","preventDefault","hasClass","progressBar","resetProgressBar","ProgressBar","$progressBar","removeClass","velocity","opacity","complete","prop","downloadFromUrl","getActionUrl","serialize","then","updateProgressBar","setTimeout","onComplete","bind","cp","displayError","t","sendActionRequest","response","$allDone","css","addClass","trigger","setProgressPercentage","showAllDone","appendTo","duration"],"sourceRoot":""}