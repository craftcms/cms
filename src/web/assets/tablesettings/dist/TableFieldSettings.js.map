{"version":3,"file":"TableFieldSettings.js","mappings":"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","sources":["webpack:///./TableFieldSettings.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.TableFieldSettings = Garnish.Base.extend({\n    columnsTableName: null,\n    defaultsTableName: null,\n    columnsData: null,\n    columnsTableId: null,\n    defaultsTableId: null,\n    columnsTableInputPath: null,\n    defaultsTableInputPath: null,\n\n    defaults: null,\n    columnSettings: null,\n\n    dropdownSettingsHtml: null,\n    dropdownSettingsCols: null,\n\n    columnsTable: null,\n    defaultsTable: null,\n\n    init: function (\n      columnsTableName,\n      defaultsTableName,\n      columnsData,\n      defaults,\n      columnSettings,\n      dropdownSettingsHtml,\n      dropdownSettingsCols\n    ) {\n      this.columnsTableName = columnsTableName;\n      this.defaultsTableName = defaultsTableName;\n      this.columnsData = columnsData;\n\n      this.columnsTableId = Craft.formatInputId(this.columnsTableName);\n      this.defaultsTableId = Craft.formatInputId(this.defaultsTableName);\n\n      this.columnsTableInputPath = Craft.filterArray(\n        this.columnsTableName.split(/[\\[\\]]+/)\n      );\n      this.defaultsTableInputPath = Craft.filterArray(\n        this.defaultsTableName.split(/[\\[\\]]+/)\n      );\n\n      this.defaults = defaults;\n      this.columnSettings = columnSettings;\n\n      this.dropdownSettingsHtml = dropdownSettingsHtml;\n      this.dropdownSettingsCols = dropdownSettingsCols;\n\n      this.initColumnsTable();\n      this.initDefaultsTable();\n    },\n\n    initColumnsTable: function () {\n      this.columnsTable = new ColumnTable(\n        this,\n        this.columnsTableId,\n        this.columnsTableName,\n        this.columnSettings,\n        {\n          rowIdPrefix: 'col',\n          defaultValues: {\n            type: 'singleline',\n          },\n          allowAdd: true,\n          allowReorder: true,\n          allowDelete: true,\n          lazyInitRows: false,\n          onAddRow: this.onAddColumn.bind(this),\n          onDeleteRow: this.reconstructDefaultsTable.bind(this),\n        }\n      );\n    },\n\n    initDefaultsTable: function () {\n      this.defaultsTable = new Craft.EditableTable(\n        this.defaultsTableId,\n        this.defaultsTableName,\n        this.columnsData,\n        {\n          rowIdPrefix: 'row',\n          allowAdd: true,\n          allowReorder: true,\n          allowDelete: true,\n        }\n      );\n    },\n\n    onAddColumn: function ($tr) {\n      this.reconstructDefaultsTable();\n      this.initColumnSettingInputs($tr);\n    },\n\n    initColumnSettingInputs: function ($container) {\n      const $textareas = $container.find(\n        'td:first-child textarea, td:nth-child(3) textarea'\n      );\n      this.addListener($textareas, 'input', 'reconstructDefaultsTable');\n    },\n\n    reconstructDefaultsTable: function () {\n      this.columnsData = Craft.expandPostArray(\n        Garnish.getPostData(this.columnsTable.$tbody)\n      );\n      let defaults = Craft.expandPostArray(\n        Garnish.getPostData(this.defaultsTable.$tbody)\n      );\n\n      // If there are no columns, drop the defaults table rows and disable add row button\n      if (!Object.keys(this.columnsData).length) {\n        const $rows = this.defaultsTable.$tbody.children();\n        for (let r = 0; r < $rows.length; r++) {\n          this.defaultsTable.deleteRow(\n            this.defaultsTable.createRowObj($rows[r])\n          );\n        }\n        this.defaultsTable.$addRowBtn.css('opacity', '0.2');\n        this.defaultsTable.$addRowBtn.css('pointer-events', 'none');\n        return;\n      }\n\n      for (let i = 0; i < this.columnsTableInputPath.length; i++) {\n        const key = this.columnsTableInputPath[i];\n        if (typeof this.columnsData[key] !== 'undefined') {\n          this.columnsData = this.columnsData[key];\n        }\n      }\n\n      // Add in the dropdown options\n      for (let colId in this.columnsData) {\n        if (this.columnsData.hasOwnProperty(colId)) {\n          switch (this.columnsData[colId].type) {\n            case 'select':\n              const rowObj = this.columnsTable.getRowObj(\n                this.columnsTable.$tbody.find(`tr[data-id=\"${colId}\"]`)\n              );\n              this.columnsData[colId].options = rowObj.options || [];\n              break;\n            case 'heading':\n              // Replace with singleline\n              this.columnsData[colId].type = 'singleline';\n              this.columnsData[colId].class = 'heading';\n              break;\n          }\n        }\n      }\n\n      for (let i = 0; i < this.defaultsTableInputPath.length; i++) {\n        const key = this.defaultsTableInputPath[i];\n\n        if (typeof defaults[key] === 'undefined') {\n          defaults = {};\n          break;\n        } else {\n          defaults = defaults[key];\n        }\n      }\n\n      const $table = $('<table/>', {\n        id: this.defaultsTableId,\n        class: 'editable fullwidth',\n      });\n\n      if (Object.values(this.columnsData).some((c) => c.heading !== '')) {\n        let theadHtml = '';\n\n        for (let colId in this.columnsData) {\n          if (!this.columnsData.hasOwnProperty(colId)) {\n            continue;\n          }\n\n          theadHtml +=\n            '<th scope=\"col\">' +\n            (this.columnsData[colId].heading\n              ? this.columnsData[colId].heading\n              : '&nbsp;') +\n            '</th>';\n        }\n\n        if (theadHtml !== '') {\n          theadHtml += '<th colspan=\"2\"></th>';\n          $table.append(`<thead><tr>${theadHtml}</tr></thead>`);\n        }\n      }\n\n      const $tbody = $('<tbody/>').appendTo($table);\n\n      for (let rowId in defaults) {\n        if (!defaults.hasOwnProperty(rowId)) {\n          continue;\n        }\n\n        Craft.EditableTable.createRow(\n          rowId,\n          this.columnsData,\n          this.defaultsTableName,\n          defaults[rowId],\n          true,\n          true\n        ).appendTo($tbody);\n      }\n\n      this.defaultsTable.$table.replaceWith($table);\n      this.defaultsTable.destroy();\n      delete this.defaultsTable;\n      this.initDefaultsTable();\n    },\n  });\n\n  const ColumnTable = Craft.EditableTable.extend({\n    fieldSettings: null,\n\n    init: function (fieldSettings, id, baseName, columns, settings) {\n      this.fieldSettings = fieldSettings;\n      this.base(id, baseName, columns, settings);\n    },\n\n    initialize: function () {\n      if (!this.base()) {\n        return false;\n      }\n\n      this.fieldSettings.initColumnSettingInputs(this.$tbody);\n      this.sorter.settings.onSortChange =\n        this.fieldSettings.reconstructDefaultsTable.bind(this.fieldSettings);\n      return true;\n    },\n\n    createRowObj: function ($tr) {\n      return new ColumnTable.Row(this, $tr);\n    },\n  });\n\n  ColumnTable.Row = Craft.EditableTable.Row.extend({\n    $typeSelect: null,\n    $settingsBtn: null,\n\n    options: null,\n    settingsModal: null,\n    optionsTable: null,\n\n    init: function (table, tr) {\n      this.base(table, tr);\n\n      if (this.table.fieldSettings.columnsData[this.id]) {\n        this.options =\n          this.table.fieldSettings.columnsData[this.id].options || null;\n      }\n\n      const $typeCell = this.$tr.find('td:nth-child(4)');\n      const $typeSelectContainer = $typeCell.find('.select');\n      this.$settingsBtn = $typeCell.find('.settings');\n\n      if (!this.$settingsBtn.length) {\n        this.$settingsBtn = $('<a/>', {\n          class: 'settings light invisible',\n          role: 'button',\n          'data-icon': 'settings',\n        });\n        $('<div/>', {class: 'flex flex-nowrap'})\n          .appendTo($typeCell)\n          .append($typeSelectContainer)\n          .append(this.$settingsBtn);\n      }\n\n      this.$typeSelect = $typeSelectContainer.find('select');\n      this.addListener(this.$typeSelect, 'change', 'handleTypeChange');\n      this.addListener(this.$settingsBtn, 'click', 'showSettingsModal');\n\n      this.addListener(this.$tr.closest('form'), 'submit', 'handleFormSubmit');\n    },\n\n    handleTypeChange: function () {\n      if (this.$typeSelect.val() === 'select') {\n        this.$settingsBtn.removeClass('invisible');\n      } else {\n        this.$settingsBtn.addClass('invisible');\n      }\n\n      this.table.fieldSettings.reconstructDefaultsTable();\n    },\n\n    showSettingsModal: function (ev) {\n      if (!this.settingsModal) {\n        const id =\n          'dropdownsettingsmodal' + Math.floor(Math.random() * 1000000);\n        const $modal = $('<div/>', {\n          class: 'modal dropdownsettingsmodal',\n        }).appendTo(Garnish.$bod);\n        const $body = $('<div/>', {class: 'body'})\n          .appendTo($modal)\n          .html(\n            this.table.fieldSettings.dropdownSettingsHtml.replace(/__ID__/g, id)\n          );\n\n        this.optionsTable = new Craft.EditableTable(\n          id,\n          '__NAME__',\n          this.table.fieldSettings.dropdownSettingsCols,\n          {\n            allowAdd: true,\n            allowDelete: true,\n            allowReorder: true,\n            onAddRow: this.handleOptionsRowChange.bind(this),\n            onDeleteRow: this.handleOptionsRowChange.bind(this),\n          }\n        );\n\n        if (this.options && this.options.length) {\n          for (let i = 0; i < this.options.length; i++) {\n            const row = this.optionsTable.addRow(false);\n            row.$tr.find('.option-label textarea').val(this.options[i].label);\n            row.$tr.find('.option-value textarea').val(this.options[i].value);\n            row.$tr\n              .find('.option-default input[type=\"checkbox\"]')\n              .prop('checked', !!this.options[i].default);\n          }\n        } else {\n          this.optionsTable.addRow(false);\n        }\n\n        const $closeButton = $('<button/>', {\n          type: 'button',\n          class: 'btn submit',\n          text: Craft.t('app', 'Done'),\n        }).appendTo($body);\n\n        this.settingsModal = new Garnish.Modal($modal, {\n          onHide: this.handleSettingsModalHide.bind(this),\n        });\n\n        this.addListener($closeButton, 'click', function () {\n          this.settingsModal.hide();\n        });\n      } else {\n        this.settingsModal.show();\n      }\n\n      setTimeout(() => {\n        this.optionsTable.$tbody.find('textarea').first().trigger('focus');\n      }, 100);\n    },\n\n    handleOptionsRowChange: function () {\n      if (this.settingsModal) {\n        this.settingsModal.updateSizeAndPosition();\n      }\n    },\n\n    handleSettingsModalHide: function () {\n      this.options = [];\n      const $rows = this.optionsTable.$table.find('tbody tr');\n      for (let i = 0; i < $rows.length; i++) {\n        let $row = $rows.eq(i);\n        this.options.push({\n          label: $row.find('.option-label textarea').val(),\n          value: $row.find('.option-value textarea').val(),\n          default: $row\n            .find('.option-default input[type=checkbox]')\n            .prop('checked'),\n        });\n      }\n\n      this.table.fieldSettings.reconstructDefaultsTable();\n    },\n\n    handleFormSubmit: function (ev) {\n      if (this.$typeSelect.val() === 'select') {\n        $('<input/>', {\n          type: 'hidden',\n          name:\n            this.table.fieldSettings.columnsTableName +\n            '[' +\n            this.id +\n            '][options]',\n          value: JSON.stringify(this.options),\n        }).appendTo(ev.currentTarget);\n      }\n    },\n  });\n})(jQuery);\n"],"names":["$","Craft","TableFieldSettings","Garnish","Base","extend","columnsTableName","defaultsTableName","columnsData","columnsTableId","defaultsTableId","columnsTableInputPath","defaultsTableInputPath","defaults","columnSettings","dropdownSettingsHtml","dropdownSettingsCols","columnsTable","defaultsTable","init","this","formatInputId","filterArray","split","initColumnsTable","initDefaultsTable","ColumnTable","rowIdPrefix","defaultValues","type","allowAdd","allowReorder","allowDelete","lazyInitRows","onAddRow","onAddColumn","bind","onDeleteRow","reconstructDefaultsTable","EditableTable","$tr","initColumnSettingInputs","$container","$textareas","find","addListener","expandPostArray","getPostData","$tbody","Object","keys","length","$rows","children","r","deleteRow","createRowObj","$addRowBtn","css","i","key","colId","hasOwnProperty","rowObj","getRowObj","options","$table","id","class","values","some","c","heading","theadHtml","append","appendTo","rowId","createRow","replaceWith","destroy","fieldSettings","baseName","columns","settings","base","initialize","sorter","onSortChange","Row","$typeSelect","$settingsBtn","settingsModal","optionsTable","table","tr","$typeCell","$typeSelectContainer","role","closest","handleTypeChange","val","removeClass","addClass","showSettingsModal","ev","show","Math","floor","random","$modal","$bod","$body","html","replace","handleOptionsRowChange","row","addRow","label","value","prop","$closeButton","text","t","Modal","onHide","handleSettingsModalHide","hide","setTimeout","first","trigger","updateSizeAndPosition","$row","eq","push","default","handleFormSubmit","name","JSON","stringify","currentTarget","jQuery"],"sourceRoot":""}