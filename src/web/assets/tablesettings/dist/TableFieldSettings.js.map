{"version":3,"file":"TableFieldSettings.js","mappings":"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","sources":["webpack:///./TableFieldSettings.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.TableFieldSettings = Garnish.Base.extend({\n    columnsTableName: null,\n    defaultsTableName: null,\n    columnsData: null,\n    columnsTableId: null,\n    defaultsTableId: null,\n    columnsTableInputPath: null,\n    defaultsTableInputPath: null,\n\n    defaults: null,\n    columnSettings: null,\n\n    dropdownSettingsHtml: null,\n    dropdownSettingsCols: null,\n\n    columnsTable: null,\n    defaultsTable: null,\n\n    init: function (\n      columnsTableName,\n      defaultsTableName,\n      columnsData,\n      defaults,\n      columnSettings,\n      dropdownSettingsHtml,\n      dropdownSettingsCols\n    ) {\n      this.columnsTableName = columnsTableName;\n      this.defaultsTableName = defaultsTableName;\n      this.columnsData = columnsData;\n\n      this.columnsTableId = Craft.formatInputId(this.columnsTableName);\n      this.defaultsTableId = Craft.formatInputId(this.defaultsTableName);\n\n      this.columnsTableInputPath = Craft.filterArray(\n        this.columnsTableName.split(/[\\[\\]]+/)\n      );\n      this.defaultsTableInputPath = Craft.filterArray(\n        this.defaultsTableName.split(/[\\[\\]]+/)\n      );\n\n      this.defaults = defaults;\n      this.columnSettings = columnSettings;\n\n      this.dropdownSettingsHtml = dropdownSettingsHtml;\n      this.dropdownSettingsCols = dropdownSettingsCols;\n\n      this.initColumnsTable();\n      this.initDefaultsTable();\n    },\n\n    initColumnsTable: function () {\n      this.columnsTable = new ColumnTable(\n        this,\n        this.columnsTableId,\n        this.columnsTableName,\n        this.columnSettings,\n        {\n          rowIdPrefix: 'col',\n          defaultValues: {\n            type: 'singleline',\n          },\n          allowAdd: true,\n          allowReorder: true,\n          allowDelete: true,\n          onAddRow: this.onAddColumn.bind(this),\n          onDeleteRow: this.reconstructDefaultsTable.bind(this),\n        }\n      );\n    },\n\n    initDefaultsTable: function () {\n      this.defaultsTable = new Craft.EditableTable(\n        this.defaultsTableId,\n        this.defaultsTableName,\n        this.columnsData,\n        {\n          rowIdPrefix: 'row',\n          allowAdd: true,\n          allowReorder: true,\n          allowDelete: true,\n        }\n      );\n    },\n\n    onAddColumn: function ($tr) {\n      this.reconstructDefaultsTable();\n      this.initColumnSettingInputs($tr);\n    },\n\n    initColumnSettingInputs: function ($container) {\n      const $textareas = $container.find(\n        'td:first-child textarea, td:nth-child(3) textarea'\n      );\n      this.addListener($textareas, 'input', 'reconstructDefaultsTable');\n    },\n\n    reconstructDefaultsTable: function () {\n      this.columnsData = Craft.expandPostArray(\n        Garnish.getPostData(this.columnsTable.$tbody)\n      );\n      let defaults = Craft.expandPostArray(\n        Garnish.getPostData(this.defaultsTable.$tbody)\n      );\n\n      // If there are no columns, drop the defaults table rows and disable add row button\n      if (!Object.keys(this.columnsData).length) {\n        const $rows = this.defaultsTable.$tbody.children();\n        for (let r = 0; r < $rows.length; r++) {\n          this.defaultsTable.deleteRow(\n            this.defaultsTable.createRowObj($rows[r])\n          );\n        }\n        this.defaultsTable.$addRowBtn.css('opacity', '0.2');\n        this.defaultsTable.$addRowBtn.css('pointer-events', 'none');\n        return;\n      }\n\n      for (let i = 0; i < this.columnsTableInputPath.length; i++) {\n        const key = this.columnsTableInputPath[i];\n        if (typeof this.columnsData[key] !== 'undefined') {\n          this.columnsData = this.columnsData[key];\n        }\n      }\n\n      // Add in the dropdown options\n      for (let colId in this.columnsData) {\n        if (\n          this.columnsData.hasOwnProperty(colId) &&\n          this.columnsData[colId].type === 'select'\n        ) {\n          const rowObj = this.columnsTable.$tbody\n            .find('tr[data-id=\"' + colId + '\"]')\n            .data('editable-table-row');\n          this.columnsData[colId].options = rowObj.options || [];\n        }\n      }\n\n      for (let i = 0; i < this.defaultsTableInputPath.length; i++) {\n        const key = this.defaultsTableInputPath[i];\n\n        if (typeof defaults[key] === 'undefined') {\n          defaults = {};\n          break;\n        } else {\n          defaults = defaults[key];\n        }\n      }\n\n      let theadHtml = '<thead>' + '<tr>';\n\n      for (let colId in this.columnsData) {\n        if (!this.columnsData.hasOwnProperty(colId)) {\n          continue;\n        }\n\n        theadHtml +=\n          '<th scope=\"col\">' +\n          (this.columnsData[colId].heading\n            ? this.columnsData[colId].heading\n            : '&nbsp;') +\n          '</th>';\n      }\n\n      theadHtml += '<th colspan=\"2\"></th>' + '</tr>' + '</thead>';\n\n      const $table = $('<table/>', {\n        id: this.defaultsTableId,\n        class: 'editable fullwidth',\n      }).append(theadHtml);\n\n      const $tbody = $('<tbody/>').appendTo($table);\n\n      for (let rowId in defaults) {\n        if (!defaults.hasOwnProperty(rowId)) {\n          continue;\n        }\n\n        Craft.EditableTable.createRow(\n          rowId,\n          this.columnsData,\n          this.defaultsTableName,\n          defaults[rowId],\n          true,\n          true\n        ).appendTo($tbody);\n      }\n\n      this.defaultsTable.$table.replaceWith($table);\n      this.defaultsTable.destroy();\n      delete this.defaultsTable;\n      this.initDefaultsTable();\n    },\n  });\n\n  const ColumnTable = Craft.EditableTable.extend({\n    fieldSettings: null,\n\n    init: function (fieldSettings, id, baseName, columns, settings) {\n      this.fieldSettings = fieldSettings;\n      this.base(id, baseName, columns, settings);\n    },\n\n    initialize: function () {\n      if (!this.base()) {\n        return false;\n      }\n\n      this.fieldSettings.initColumnSettingInputs(this.$tbody);\n      this.sorter.settings.onSortChange =\n        this.fieldSettings.reconstructDefaultsTable.bind(this.fieldSettings);\n      return true;\n    },\n\n    createRowObj: function ($tr) {\n      return new ColumnTable.Row(this, $tr);\n    },\n  });\n\n  ColumnTable.Row = Craft.EditableTable.Row.extend({\n    $typeSelect: null,\n    $settingsBtn: null,\n\n    options: null,\n    settingsModal: null,\n    optionsTable: null,\n\n    init: function (table, tr) {\n      this.base(table, tr);\n\n      if (this.table.fieldSettings.columnsData[this.id]) {\n        this.options =\n          this.table.fieldSettings.columnsData[this.id].options || null;\n      }\n\n      const $typeCell = this.$tr.find('td:nth-child(4)');\n      const $typeSelectContainer = $typeCell.find('.select');\n      this.$settingsBtn = $typeCell.find('.settings');\n\n      if (!this.$settingsBtn.length) {\n        this.$settingsBtn = $('<a/>', {\n          class: 'settings light invisible',\n          role: 'button',\n          'data-icon': 'settings',\n        });\n        $('<div/>', {class: 'flex flex-nowrap'})\n          .appendTo($typeCell)\n          .append($typeSelectContainer)\n          .append(this.$settingsBtn);\n      }\n\n      this.$typeSelect = $typeSelectContainer.find('select');\n      this.addListener(this.$typeSelect, 'change', 'handleTypeChange');\n      this.addListener(this.$settingsBtn, 'click', 'showSettingsModal');\n\n      this.addListener(this.$tr.closest('form'), 'submit', 'handleFormSubmit');\n    },\n\n    handleTypeChange: function () {\n      if (this.$typeSelect.val() === 'select') {\n        this.$settingsBtn.removeClass('invisible');\n      } else {\n        this.$settingsBtn.addClass('invisible');\n      }\n\n      this.table.fieldSettings.reconstructDefaultsTable();\n    },\n\n    showSettingsModal: function (ev) {\n      if (!this.settingsModal) {\n        const id =\n          'dropdownsettingsmodal' + Math.floor(Math.random() * 1000000);\n        const $modal = $('<div/>', {\n          class: 'modal dropdownsettingsmodal',\n        }).appendTo(Garnish.$bod);\n        const $body = $('<div/>', {class: 'body'})\n          .appendTo($modal)\n          .html(\n            this.table.fieldSettings.dropdownSettingsHtml.replace(/__ID__/g, id)\n          );\n\n        this.optionsTable = new Craft.EditableTable(\n          id,\n          '__NAME__',\n          this.table.fieldSettings.dropdownSettingsCols,\n          {\n            allowAdd: true,\n            allowDelete: true,\n            allowReorder: true,\n            onAddRow: this.handleOptionsRowChange.bind(this),\n            onDeleteRow: this.handleOptionsRowChange.bind(this),\n          }\n        );\n\n        if (this.options && this.options.length) {\n          for (let i = 0; i < this.options.length; i++) {\n            const row = this.optionsTable.addRow(false);\n            row.$tr.find('.option-label textarea').val(this.options[i].label);\n            row.$tr.find('.option-value textarea').val(this.options[i].value);\n            row.$tr\n              .find('.option-default input[type=\"checkbox\"]')\n              .prop('checked', !!this.options[i].default);\n          }\n        } else {\n          this.optionsTable.addRow(false);\n        }\n\n        const $closeButton = $('<button/>', {\n          type: 'button',\n          class: 'btn submit',\n          text: Craft.t('app', 'Done'),\n        }).appendTo($body);\n\n        this.settingsModal = new Garnish.Modal($modal, {\n          onHide: this.handleSettingsModalHide.bind(this),\n        });\n\n        this.addListener($closeButton, 'click', function () {\n          this.settingsModal.hide();\n        });\n      } else {\n        this.settingsModal.show();\n      }\n\n      setTimeout(() => {\n        this.optionsTable.$tbody.find('textarea').first().trigger('focus');\n      }, 100);\n    },\n\n    handleOptionsRowChange: function () {\n      if (this.settingsModal) {\n        this.settingsModal.updateSizeAndPosition();\n      }\n    },\n\n    handleSettingsModalHide: function () {\n      this.options = [];\n      const $rows = this.optionsTable.$table.find('tbody tr');\n      for (let i = 0; i < $rows.length; i++) {\n        let $row = $rows.eq(i);\n        this.options.push({\n          label: $row.find('.option-label textarea').val(),\n          value: $row.find('.option-value textarea').val(),\n          default: $row\n            .find('.option-default input[type=checkbox]')\n            .prop('checked'),\n        });\n      }\n\n      this.table.fieldSettings.reconstructDefaultsTable();\n    },\n\n    handleFormSubmit: function (ev) {\n      if (this.$typeSelect.val() === 'select') {\n        $('<input/>', {\n          type: 'hidden',\n          name:\n            this.table.fieldSettings.columnsTableName +\n            '[' +\n            this.id +\n            '][options]',\n          value: JSON.stringify(this.options),\n        }).appendTo(ev.currentTarget);\n      }\n    },\n  });\n})(jQuery);\n"],"names":["$","Craft","TableFieldSettings","Garnish","Base","extend","columnsTableName","defaultsTableName","columnsData","columnsTableId","defaultsTableId","columnsTableInputPath","defaultsTableInputPath","defaults","columnSettings","dropdownSettingsHtml","dropdownSettingsCols","columnsTable","defaultsTable","init","this","formatInputId","filterArray","split","initColumnsTable","initDefaultsTable","ColumnTable","rowIdPrefix","defaultValues","type","allowAdd","allowReorder","allowDelete","onAddRow","onAddColumn","bind","onDeleteRow","reconstructDefaultsTable","EditableTable","$tr","initColumnSettingInputs","$container","$textareas","find","addListener","expandPostArray","getPostData","$tbody","Object","keys","length","$rows","children","r","deleteRow","createRowObj","$addRowBtn","css","i","key","colId","hasOwnProperty","rowObj","data","options","theadHtml","heading","$table","id","class","append","appendTo","rowId","createRow","replaceWith","destroy","fieldSettings","baseName","columns","settings","base","initialize","sorter","onSortChange","Row","$typeSelect","$settingsBtn","settingsModal","optionsTable","table","tr","$typeCell","$typeSelectContainer","role","closest","handleTypeChange","val","removeClass","addClass","showSettingsModal","ev","show","Math","floor","random","$modal","$bod","$body","html","replace","handleOptionsRowChange","row","addRow","label","value","prop","$closeButton","text","t","Modal","onHide","handleSettingsModalHide","hide","setTimeout","first","trigger","updateSizeAndPosition","$row","eq","push","default","handleFormSubmit","name","JSON","stringify","currentTarget","jQuery"],"sourceRoot":""}