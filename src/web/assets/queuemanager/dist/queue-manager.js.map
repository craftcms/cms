{"version":3,"file":"queue-manager.js","mappings":"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","sources":["webpack:///./queue-manager.js"],"sourcesContent":["/**\n * @link https://craftcms.com/\n * @copyright Copyright (c) Pixel & Tonic, Inc.\n * @license https://craftcms.github.io/license/\n */\n\n/**\n * Vue component for the Queue manager\n *\n * @author Pixel & Tonic, Inc. <support@pixelandtonic.com>\n * @author Global Network Group | Giel Tettelaar <giel@yellowflash.net>\n * @since 3.2.0\n */\nnew Vue({\n  el: '#main',\n  delimiters: ['[[', ']]'],\n  data() {\n    return {\n      loading: false,\n      indexTimeout: null,\n      jobs: [],\n      totalJobs: null,\n      totalJobsFormatted: null,\n      activeJobId: null,\n      activeJob: null,\n      limit: 50,\n    };\n  },\n\n  /**\n   * Mounted function\n   */\n  mounted() {\n    document.getElementById('queue-manager-utility').removeAttribute('class');\n\n    Craft.cp.on('setJobInfo', () => {\n      this.jobs = Craft.cp.jobInfo.slice(0);\n      this.totalJobs = Craft.cp.totalJobs;\n      this.totalJobsFormatted = Craft.formatNumber(this.totalJobs);\n      if (!this.loading) {\n        this.refreshActiveJob();\n      }\n    });\n\n    window.onpopstate = (event) => {\n      if (event.state && event.state.jobId) {\n        this.setActiveJob(event.state.jobId, false);\n      } else {\n        this.clearActiveJob(false);\n      }\n    };\n\n    // Was a specific job requested?\n    let m = Craft.path.match(/utilities\\/queue-manager\\/([^\\/]+)/);\n    if (m) {\n      let jobId = m[1];\n      history.replaceState({jobId}, '', this.url(jobId));\n      this.setActiveJob(jobId, false);\n    }\n  },\n\n  methods: {\n    /**\n     * Force-updates the job progress.\n     */\n    updateJobProgress() {\n      Craft.cp.trackJobProgress(false, true);\n    },\n\n    /**\n     * Sets the active job that should be shown.\n     * @param {string} jobId\n     * @param {boolean} pushState\n     * @return {Promise}\n     */\n    setActiveJob(jobId, pushState) {\n      return new Promise((resolve, reject) => {\n        window.clearTimeout(this.indexTimeout);\n        this.loading = true;\n        this.activeJobId = jobId;\n\n        if (pushState) {\n          history.pushState({jobId}, '', this.url(jobId));\n        }\n\n        axios\n          .get(Craft.getActionUrl('queue/get-job-details?id=' + jobId + '', {}))\n          .then(\n            (response) => {\n              if (response.data.id != this.activeJobId) {\n                resolve(false);\n                return;\n              }\n              this.activeJob = response.data;\n              this.loading = false;\n              resolve(true);\n            },\n            (response) => {\n              Craft.cp.displayError(response.response.data.error);\n              reject(response);\n            }\n          );\n      });\n    },\n\n    /**\n     * Refreshes the active job\n     * @return {Promise}\n     */\n    refreshActiveJob() {\n      return new Promise((resolve, reject) => {\n        if (!this.activeJobId) {\n          resolve(false);\n          return;\n        }\n        let oldJob = this.activeJob;\n        this.setActiveJob(this.activeJobId, false)\n          .then((success) => {\n            // If it's done now, the response is probably missing critical info about the job\n            if (success && oldJob && this.activeJob.status == 3) {\n              $.extend(oldJob, {\n                progress: 100,\n                status: 3,\n              });\n              delete oldJob.error;\n              delete oldJob.progressLabel;\n              this.activeJob = oldJob;\n            }\n            resolve(success);\n          })\n          .catch(reject);\n      });\n    },\n\n    /**\n     * Retries all jobs.\n     * @return {Promise}\n     */\n    retryAll() {\n      return new Promise((resolve, reject) => {\n        window.clearTimeout(this.indexTimeout);\n        Craft.sendActionRequest('POST', 'queue/retry-all')\n          .then((response) => {\n            Craft.cp.displayNotice(Craft.t('app', 'Retrying all failed jobs.'));\n            this.updateJobProgress();\n            resolve();\n          })\n          .catch(reject);\n      });\n    },\n\n    /**\n     * Releases all jobs.\n     * @return {Promise}\n     */\n    releaseAll() {\n      return new Promise((resolve, reject) => {\n        if (\n          !confirm(\n            Craft.t(\n              'app',\n              'Are you sure you want to release all jobs in the queue?'\n            )\n          )\n        ) {\n          resolve(false);\n          return;\n        }\n\n        Craft.sendActionRequest('POST', 'queue/release-all')\n          .then((response) => {\n            Craft.cp.displayNotice(Craft.t('app', 'All jobs released.'));\n            this.clearActiveJob(true);\n            this.updateJobProgress();\n            resolve(true);\n          })\n          .catch(reject);\n      });\n    },\n\n    /**\n     * Retries a specific job.\n     * @param {Object} job\n     * @return {Promise}\n     */\n    retryJob(job) {\n      return new Promise((resolve, reject) => {\n        // Only confirm if the job is currently reserved\n        if (job.status == 2) {\n          let message = Craft.t(\n            'app',\n            'Are you sure you want to restart the job “{description}”? Any progress could be lost.',\n            {\n              description: job.description,\n            }\n          );\n          if (!confirm(message)) {\n            resolve(false);\n            return;\n          }\n        }\n\n        window.clearTimeout(this.indexTimeout);\n\n        Craft.sendActionRequest('POST', 'queue/retry', {data: {id: job.id}})\n          .then((response) => {\n            if (job.status == 2) {\n              Craft.cp.displayNotice(Craft.t('app', 'Job restarted.'));\n            } else {\n              Craft.cp.displayNotice(Craft.t('app', 'Job retried.'));\n            }\n\n            this.updateJobProgress();\n            resolve(true);\n          })\n          .catch(reject);\n      });\n    },\n\n    /**\n     * Retries the active job.\n     * @return {Promise}\n     */\n    retryActiveJob() {\n      return new Promise((resolve, reject) => {\n        this.retryJob(this.activeJob).then(resolve).catch(reject);\n      });\n    },\n\n    /**\n     * Releases a job.\n     * @param {Object} job\n     * @returns {Promise}\n     */\n    releaseJob(job) {\n      return new Promise((resolve, reject) => {\n        let message = Craft.t(\n          'app',\n          'Are you sure you want to release the job “{description}”?',\n          {\n            description: job.description,\n          }\n        );\n        if (!confirm(message)) {\n          resolve(false);\n          return;\n        }\n\n        Craft.sendActionRequest('POST', 'queue/release', {data: {id: job.id}})\n          .then((response) => {\n            Craft.cp.displayNotice(Craft.t('app', 'Job released.'));\n            this.updateJobProgress();\n            resolve(true);\n          })\n          .catch(({response}) => reject);\n      });\n    },\n\n    /**\n     * Releases the active job.\n     * @returns {Promise}\n     */\n    releaseActiveJob() {\n      return new Promise((resolve, reject) => {\n        this.releaseJob(this.activeJob)\n          .then((released) => {\n            if (released) {\n              this.clearActiveJob(true);\n            }\n            resolve(released);\n          })\n          .catch(reject);\n      });\n    },\n\n    /**\n     * Resets an active job so that the index screen is displayed.\n     * @param {boolean} pushState\n     */\n    clearActiveJob(pushState) {\n      if (!this.activeJob) {\n        return;\n      }\n\n      this.activeJob = null;\n      this.activeJobId = null;\n\n      if (pushState) {\n        history.pushState({}, '', this.url());\n      }\n    },\n\n    /**\n     * Returns a Queue Manager URL.\n     * @param {string|null} jobId\n     * @returns {string}\n     */\n    url(jobId) {\n      return Craft.getUrl(\n        'utilities/queue-manager' + (jobId ? '/' + jobId : '')\n      );\n    },\n\n    /**\n     * Returns whether a job can be retried.\n     * @param {Object} job\n     * @returns {boolean}\n     */\n    isRetryable(job) {\n      return job.status == 2 || job.status == 4;\n    },\n\n    /**\n     * Returns the class name a job's status cell should have.\n     * @param {number} status\n     * @returns {string}\n     */\n    jobStatusClass(status) {\n      if (status == 4) {\n        return 'error';\n      }\n      return '';\n    },\n\n    /**\n     * Returns a job status code.\n     * @param {number} status\n     * @param {number} delay\n     * @returns {string}\n     */\n    jobStatusLabel(status, delay) {\n      if (delay) {\n        return Craft.t('app', 'Delayed');\n      }\n\n      switch (status) {\n        case 1:\n          return Craft.t('app', 'Pending');\n          break;\n        case 2:\n          return Craft.t('app', 'Reserved');\n          break;\n        case 3:\n          return Craft.t('app', 'Finished');\n          break;\n        case 4:\n          return Craft.t('app', 'Failed');\n          break;\n        default:\n          return '';\n      }\n    },\n\n    /**\n     * Returns a job status icon class.\n     * @param {number} status\n     * @returns {string}\n     */\n    jobStatusIconClass(status) {\n      let c = 'status';\n      switch (status) {\n        case 1:\n          c += ' orange';\n          break;\n        case 2:\n          c += ' green';\n          break;\n        case 4:\n          c += ' red';\n          break;\n      }\n      return c;\n    },\n\n    /**\n     * Returns a job attribute name.\n     * @param {string} name\n     * @returns {string}\n     */\n    jobAttributeName(name) {\n      switch (name) {\n        case 'id':\n          return Craft.t('app', 'ID');\n        case 'status':\n          return Craft.t('app', 'Status');\n        case 'progress':\n          return Craft.t('app', 'Progress');\n        case 'description':\n          return Craft.t('app', 'Description');\n        case 'ttr':\n          return Craft.t('app', 'Time to reserve');\n        case 'error':\n          return Craft.t('app', 'Error');\n        default:\n          return name;\n      }\n    },\n\n    /**\n     * Formats a TTR value.\n     * @param {string} value\n     * @return {string}\n     */\n    ttrValue(value) {\n      return Craft.t(\n        'app',\n        '{num, number} {num, plural, =1{second} other{seconds}}',\n        {\n          num: value,\n        }\n      );\n    },\n  },\n});\n"],"names":["Vue","el","delimiters","data","loading","indexTimeout","jobs","totalJobs","totalJobsFormatted","activeJobId","activeJob","limit","mounted","document","getElementById","removeAttribute","Craft","cp","on","jobInfo","slice","formatNumber","refreshActiveJob","window","onpopstate","event","state","jobId","setActiveJob","clearActiveJob","m","path","match","history","replaceState","this","url","methods","updateJobProgress","trackJobProgress","pushState","Promise","resolve","reject","clearTimeout","axios","get","getActionUrl","then","response","id","displayError","error","oldJob","success","status","$","extend","progress","progressLabel","retryAll","sendActionRequest","displayNotice","t","releaseAll","confirm","retryJob","job","message","description","retryActiveJob","releaseJob","releaseActiveJob","released","getUrl","isRetryable","jobStatusClass","jobStatusLabel","delay","jobStatusIconClass","c","jobAttributeName","name","ttrValue","value","num"],"sourceRoot":""}