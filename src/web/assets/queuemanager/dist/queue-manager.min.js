new Vue({el:"#main",delimiters:["[[","]]"],data:()=>({loading:!1,indexTimeout:null,jobs:[],totalJobs:null,totalJobsFormatted:null,activeJobId:null,activeJob:null,limit:50}),mounted(){document.getElementById("queue-manager-utility").removeAttribute("class"),Craft.cp.on("setJobInfo",()=>{this.jobs=Craft.cp.jobInfo.slice(0),this.totalJobs=Craft.cp.totalJobs,this.totalJobsFormatted=Craft.formatNumber(this.totalJobs),this.loading||this.refreshActiveJob()}),window.onpopstate=(t=>{console.log("popstate",t.state),t.state&&t.state.jobId?this.setActiveJob(t.state.jobId,!1):this.clearActiveJob(!1)});let t=Craft.path.match(/utilities\/queue-manager\/([^\/]+)/);if(t){let e=t[1];history.replaceState({jobId:e},"",this.url(e)),this.setActiveJob(e,!1)}},methods:{updateJobProgress(){Craft.cp.trackJobProgress(!1,!0)},setActiveJob(t,e){return new Promise((r,s)=>{window.clearTimeout(this.indexTimeout),this.loading=!0,this.activeJobId=t,e&&history.pushState({jobId:t},"",this.url(t)),axios.get(Craft.getActionUrl("queue/get-job-details?id="+t,{})).then(t=>{t.data.id==this.activeJobId?(this.activeJob=t.data,this.loading=!1,r(!0)):r(!1)},t=>{Craft.cp.displayError(t.response.data.error),s(t)})})},refreshActiveJob(){return new Promise((t,e)=>{if(!this.activeJobId)return void t(!1);let r=this.activeJob;this.setActiveJob(this.activeJobId,!1).then(e=>{e&&r&&3==this.activeJob.status&&($.extend(r,{progress:100,status:3}),delete r.error,delete r.progressLabel,this.activeJob=r),t(e)}).catch(e)})},retryAll(){return new Promise((t,e)=>{window.clearTimeout(this.indexTimeout),this.postActionRequest("queue/retry-all").then(e=>{Craft.cp.displayNotice(Craft.t("app","Retrying all failed jobs.")),this.updateJobProgress(),t()}).catch(e)})},releaseAll(){return new Promise((t,e)=>{confirm(Craft.t("app","Are you sure you want to release all jobs in the queue?"))?this.postActionRequest("queue/release-all").then(e=>{Craft.cp.displayNotice(Craft.t("app","All jobs released.")),this.clearActiveJob(!0),this.updateJobProgress(),t(!0)}).catch(e):t(!1)})},retryJob(t){return new Promise((e,r)=>{if(2==t.status){let r=Craft.t("app","Are you sure you want to restart the job “{description}”? Any progress could be lost.",{description:t.description});if(!confirm(r))return void e(!1)}window.clearTimeout(this.indexTimeout),this.postActionRequest("queue/retry",{id:t.id}).then(r=>{2==t.status?Craft.cp.displayNotice(Craft.t("app","Job restarted.")):Craft.cp.displayNotice(Craft.t("app","Job retried.")),this.updateJobProgress(),e(!0)}).catch(r)})},retryActiveJob(){return new Promise((t,e)=>{this.retryJob(this.activeJob).then(t).catch(e)})},releaseJob(t){return new Promise((e,r)=>{let s=Craft.t("app","Are you sure you want to release the job “{description}”?",{description:t.description});confirm(s)?this.postActionRequest("queue/release",{id:t.id}).then(t=>{Craft.cp.displayNotice(Craft.t("app","Job released.")),this.updateJobProgress(),e(!0)}):e(!1)})},releaseActiveJob(){return new Promise((t,e)=>{this.releaseJob(this.activeJob).then(e=>{e&&this.clearActiveJob(!0),t(e)}).catch(e)})},clearActiveJob(t){this.activeJob&&(this.activeJob=null,this.activeJobId=null,t&&history.pushState({},"",this.url()))},url:t=>Craft.getUrl("utilities/queue-manager"+(t?"/"+t:"")),isRetryable:t=>2==t.status||4==t.status,jobStatusClass:t=>4==t?"error":"",jobStatusLabel(t){switch(t){case 1:return Craft.t("app","Pending");case 2:return Craft.t("app","Reserved");case 3:return Craft.t("app","Finished");case 4:return Craft.t("app","Failed");default:return""}},jobStatusIconClass(t){let e="status";switch(t){case 1:e+=" orange";break;case 2:e+=" green";break;case 4:e+=" red"}return e},jobAttributeName(t){switch(t){case"id":return Craft.t("app","ID");case"status":return Craft.t("app","Status");case"progress":return Craft.t("app","Progress");case"description":return Craft.t("app","Description");case"ttr":return Craft.t("app","Time to reserve");case"error":return Craft.t("app","Error");default:return t}},ttrValue:t=>Craft.t("app","{num, number} {num, plural, =1{second} other{seconds}}",{num:t}),postActionRequest:(t,e)=>new Promise((r,s)=>{Craft.postActionRequest(t,e,(t,e)=>{"success"===e?r(t):s()})})}});
//# sourceMappingURL=queue-manager.min.js.map