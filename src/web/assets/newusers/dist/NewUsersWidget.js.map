{"version":3,"file":"NewUsersWidget.js","mappings":"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","sources":["webpack:///./NewUsersWidget.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.NewUsersWidget = Garnish.Base.extend(\n    {\n      settings: null,\n      data: null,\n      startDate: null,\n      endDate: null,\n\n      $widget: null,\n      $body: null,\n\n      init: function (widgetId, settings) {\n        this.setSettings(settings);\n\n        this.$widget = $('#widget' + widgetId);\n        this.$body = this.$widget.find('.body:first');\n        this.$chartContainer = $('<div class=\"chart hidden\"></div>').appendTo(\n          this.$body\n        );\n        this.$error = $('<div class=\"error\"/>').appendTo(this.$body);\n\n        var dateRange = this.settings.dateRange;\n\n        switch (dateRange) {\n          case 'd7':\n            this.startDate = Craft.NewUsersWidget.getDateByDays(6);\n            this.endDate = new Date();\n            break;\n\n          case 'd30':\n            this.startDate = Craft.NewUsersWidget.getDateByDays(30);\n            this.endDate = new Date();\n            break;\n\n          case 'lastweek':\n            this.startDate = Craft.NewUsersWidget.getDateByDays(13);\n            this.endDate = Craft.NewUsersWidget.getDateByDays(7);\n            break;\n\n          case 'lastmonth':\n            this.startDate = Craft.NewUsersWidget.getDateByDays(60);\n            this.endDate = Craft.NewUsersWidget.getDateByDays(30);\n            break;\n        }\n\n        // Request orders report\n        var data = {\n          startDate: Craft.NewUsersWidget.getDateValue(this.startDate),\n          endDate: Craft.NewUsersWidget.getDateValue(this.endDate),\n          userGroupId: this.settings.userGroupId,\n        };\n\n        Craft.sendActionRequest('POST', 'charts/get-new-users-data', {data})\n          .then((response) => {\n            this.$chartContainer.removeClass('hidden');\n\n            if (response.data.errors && response.data.errors.length) {\n              return Promise.reject();\n            }\n\n            // Create chart\n            this.chart = new Craft.charts.Area(this.$chartContainer, {\n              yAxis: {\n                formatter: function (chart) {\n                  return function (d) {\n                    var format = ',.0f';\n\n                    if (d != Math.round(d)) {\n                      format = ',.1f';\n                    }\n\n                    return chart.formatLocale.format(format)(d);\n                  };\n                },\n              },\n            });\n\n            var chartDataTable = new Craft.charts.DataTable(\n              response.data.dataTable\n            );\n\n            var chartSettings = {\n              orientation: response.data.orientation,\n              dataScale: response.data.scale,\n              formats: response.data.formats,\n            };\n\n            this.chart.draw(chartDataTable, chartSettings);\n\n            // Resize chart when grid is refreshed\n            window.dashboard.grid.on(\n              'refreshCols',\n              this.handleGridRefresh.bind(this)\n            );\n          })\n          .catch(({response}) => {\n            const msg =\n              response?.data?.message ||\n              Craft.t('app', 'A server error occurred.');\n            this.$error.html(msg);\n            this.$error.removeClass('hidden');\n          });\n\n        this.$widget.data('widget').on('destroy', this.destroy.bind(this));\n\n        Craft.NewUsersWidget.instances.push(this);\n      },\n\n      handleGridRefresh: function () {\n        this.chart.resize();\n      },\n\n      destroy: function () {\n        Craft.NewUsersWidget.instances.splice(\n          $.inArray(this, Craft.NewUsersWidget.instances),\n          1\n        );\n        this.base();\n      },\n    },\n    {\n      instances: [],\n\n      getDateByDays: function (days) {\n        var date = new Date();\n        date = date.getTime() - 60 * 60 * 24 * days * 1000;\n        return new Date(date);\n      },\n\n      getDateValue: function (date) {\n        return Math.floor(date.getTime() / 1000);\n      },\n    }\n  );\n})(jQuery);\n"],"names":["$","jQuery","Craft","NewUsersWidget","Garnish","Base","extend","settings","data","startDate","endDate","$widget","$body","init","widgetId","_this","this","setSettings","find","$chartContainer","appendTo","$error","dateRange","getDateByDays","Date","getDateValue","userGroupId","sendActionRequest","then","response","removeClass","errors","length","Promise","reject","chart","charts","Area","yAxis","formatter","d","format","Math","round","formatLocale","chartDataTable","DataTable","dataTable","chartSettings","orientation","dataScale","scale","formats","draw","window","dashboard","grid","on","handleGridRefresh","bind","catch","_ref","_response$data","msg","message","t","html","destroy","instances","push","resize","splice","inArray","base","days","date","getTime","floor"],"sourceRoot":""}