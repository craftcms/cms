{"version":3,"file":"MatrixConfigurator.js","mappings":"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","sources":["webpack:///./MatrixConfigurator.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  /**\n   * Matrix configurator class\n   */\n  Craft.MatrixConfigurator = Garnish.Base.extend({\n    fieldTypeInfo: null,\n\n    inputNamePrefix: null,\n    fieldTypeSettingsNamespace: null,\n    inputIdPrefix: null,\n    placeholderKey: null,\n\n    $container: null,\n\n    $blockTypesColumnContainer: null,\n    $fieldsColumnContainer: null,\n    $fieldSettingsColumnContainer: null,\n\n    $blockTypeItemsOuterContainer: null,\n    $blockTypeItemsContainer: null,\n    $fieldItemsContainer: null,\n    $fieldSettingItemsContainer: null,\n\n    $newBlockTypeBtn: null,\n    $newFieldBtn: null,\n\n    blockTypes: null,\n    selectedBlockType: null,\n    blockTypeSort: null,\n    totalNewBlockTypes: 0,\n\n    _fieldTypeSettingsHtml: null,\n    _cancelToken: null,\n    _ignoreFailedRequest: false,\n\n    init: function (\n      fieldTypeInfo,\n      inputNamePrefix,\n      fieldTypeSettingsNamespace,\n      placeholderKey\n    ) {\n      this.fieldTypeInfo = fieldTypeInfo;\n      this.inputNamePrefix = inputNamePrefix;\n      this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n      this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n      this.placeholderKey = placeholderKey;\n\n      this.$container = $(\n        '#' + this.inputIdPrefix + '-matrix-configurator:first .input:first'\n      );\n\n      this.$blockTypesColumnContainer = this.$container\n        .children('.block-types')\n        .children();\n      this.$fieldsColumnContainer = this.$container\n        .children('.mc-fields')\n        .children();\n      this.$fieldSettingsColumnContainer = this.$container\n        .children('.mc-field-settings')\n        .children();\n\n      this.$blockTypeItemsOuterContainer =\n        this.$blockTypesColumnContainer.children('.mc-col-items');\n      this.$blockTypeItemsContainer =\n        this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n      this.$fieldItemsOuterContainer =\n        this.$fieldsColumnContainer.children('.mc-col-items');\n      this.$fieldSettingItemsContainer =\n        this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n      this.$newBlockTypeBtn =\n        this.$blockTypeItemsOuterContainer.children('.btn');\n      this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n      this._fieldTypeSettingsHtml = {};\n\n      // Find the existing block types\n      this.blockTypes = {};\n\n      var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n      for (var i = 0; i < $blockTypeItems.length; i++) {\n        var $item = $($blockTypeItems[i]),\n          id = $item.data('id');\n\n        this.blockTypes[id] = new BlockType(this, $item);\n\n        // Is this a new block type?\n        var newMatch = typeof id === 'string' && id.match(/new(\\d+)/);\n\n        if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n          this.totalNewBlockTypes = parseInt(newMatch[1]);\n        }\n      }\n\n      this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n        handle: '.move',\n        axis: 'y',\n      });\n\n      this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n      this.addListener(\n        this.$newFieldBtn,\n        'click',\n        'addFieldToSelectedBlockType'\n      );\n    },\n\n    getFieldTypeInfo: function (type) {\n      for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n        if (this.fieldTypeInfo[i].type === type) {\n          return this.fieldTypeInfo[i];\n        }\n      }\n    },\n\n    addBlockType: function () {\n      this.getBlockTypeSettingsModal();\n\n      this.blockTypeSettingsModal.show();\n\n      this.blockTypeSettingsModal.onSubmit = (name, handle) => {\n        this.totalNewBlockTypes++;\n        var id = 'new' + this.totalNewBlockTypes;\n\n        var $item = $(\n          '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' +\n            id +\n            '\">' +\n            '<div class=\"mci-name\">' +\n            '<h4></h4>' +\n            '<div class=\"smalltext light code\"></div>' +\n            '</div>' +\n            '<a class=\"settings icon\" title=\"' +\n            Craft.t('app', 'Settings') +\n            '\"></a>' +\n            '<a class=\"move icon\" title=\"' +\n            Craft.t('app', 'Reorder') +\n            '\"></a>' +\n            '<input class=\"hidden\" name=\"' +\n            this.inputNamePrefix +\n            '[blockTypes][' +\n            id +\n            '][name]\">' +\n            '<input class=\"hidden\" name=\"' +\n            this.inputNamePrefix +\n            '[blockTypes][' +\n            id +\n            '][handle]\">' +\n            '</div>'\n        ).appendTo(this.$blockTypeItemsContainer);\n\n        this.blockTypes[id] = new BlockType(this, $item);\n        this.blockTypes[id].applySettings(name, handle);\n        this.blockTypes[id].select();\n        this.blockTypes[id].addField();\n\n        this.blockTypeSort.addItems($item);\n      };\n    },\n\n    addFieldToSelectedBlockType: function () {\n      if (this.selectedBlockType) {\n        this.selectedBlockType.addField();\n      }\n    },\n\n    getBlockTypeSettingsModal: function () {\n      if (!this.blockTypeSettingsModal) {\n        this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n      }\n\n      return this.blockTypeSettingsModal;\n    },\n\n    getFieldTypeSettingsHtml: function (type) {\n      return new Promise((resolve, reject) => {\n        if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n          resolve(this._fieldTypeSettingsHtml[type]);\n          return;\n        }\n\n        // Cancel the current request\n        if (this._cancelToken) {\n          this._ignoreFailedRequest = true;\n          this._cancelToken.cancel();\n          Garnish.requestAnimationFrame(() => {\n            this._ignoreFailedRequest = false;\n          });\n        }\n\n        // Create a cancel token\n        this._cancelToken = axios.CancelToken.source();\n\n        Craft.sendActionRequest('POST', 'fields/render-settings', {\n          cancelToken: this._cancelToken.token,\n          data: {\n            type: type,\n            namespace: this.fieldTypeSettingsNamespace,\n          },\n        })\n          .then((response) => {\n            this._fieldTypeSettingsHtml[type] = response.data;\n            resolve(response.data);\n          })\n          .catch(() => {\n            if (!this._ignoreFailedRequest) {\n              Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n            reject();\n          });\n      });\n    },\n  });\n\n  /**\n   * Block type settings modal class\n   */\n  var BlockTypeSettingsModal = Garnish.Modal.extend({\n    init: function () {\n      this.base();\n\n      this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n      this.setContainer(this.$form);\n\n      this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n      let $nameField = Craft.ui\n        .createTextField({\n          label: Craft.t('app', 'Name'),\n          instructions: Craft.t(\n            'app',\n            'What this block type will be called in the control panel.'\n          ),\n        })\n        .appendTo(this.$body);\n      let $nameInputContainer = $nameField.find('.input');\n      this.$nameInput = $nameInputContainer.find('.text');\n      this.$nameErrorList = $('<ul class=\"errors\"/>')\n        .appendTo($nameInputContainer)\n        .hide();\n      let $handleField = Craft.ui\n        .createTextField({\n          label: Craft.t('app', 'Handle'),\n          instructions: Craft.t(\n            'app',\n            'How you’ll refer to this block type in the templates.'\n          ),\n          class: 'code',\n          maxlength: 47,\n        })\n        .appendTo(this.$body);\n      let $handleInputContainer = $handleField.find('.input');\n      this.$handleInput = $handleInputContainer.find('.text');\n      this.$handleErrorList = $('<ul class=\"errors\"/>')\n        .appendTo($handleInputContainer)\n        .hide();\n      this.$deleteBtn = $(\n        '<a class=\"error left hidden\" style=\"line-height: 30px;\">' +\n          Craft.t('app', 'Delete') +\n          '</a>'\n      ).appendTo(this.$body);\n      this.$buttons = $(\n        '<div class=\"buttons right\" style=\"margin-top: 0;\"/>'\n      ).appendTo(this.$body);\n      this.$cancelBtn = $('<button/>', {\n        type: 'button',\n        class: 'btn',\n        text: Craft.t('app', 'Cancel'),\n      }).appendTo(this.$buttons);\n      this.$submitBtn = $('<button/>', {\n        type: 'submit',\n        class: 'btn submit',\n      }).appendTo(this.$buttons);\n\n      this.handleGenerator = new Craft.HandleGenerator(\n        this.$nameInput,\n        this.$handleInput\n      );\n\n      this.addListener(this.$cancelBtn, 'click', 'hide');\n      this.addListener(this.$form, 'submit', 'onFormSubmit');\n      this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n    },\n\n    onFormSubmit: function (ev) {\n      ev.preventDefault();\n\n      // Prevent multi form submits with the return key\n      if (!this.visible) {\n        return;\n      }\n\n      if (this.handleGenerator.listening) {\n        // Give the handle a chance to catch up with the input\n        this.handleGenerator.updateTarget();\n      }\n\n      // Basic validation\n      var name = Craft.trim(this.$nameInput.val()),\n        handle = Craft.trim(this.$handleInput.val());\n\n      if (!name || !handle) {\n        Garnish.shake(this.$form);\n      } else {\n        this.hide();\n        this.onSubmit(name, handle);\n      }\n    },\n\n    onDeleteClick: function () {\n      if (\n        confirm(\n          Craft.t('app', 'Are you sure you want to delete this block type?')\n        )\n      ) {\n        this.hide();\n        this.onDelete();\n      }\n    },\n\n    show: function (name, handle, errors) {\n      this.$nameInput.val(typeof name === 'string' ? name : '');\n      this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n      if (!handle) {\n        this.handleGenerator.startListening();\n      } else {\n        this.handleGenerator.stopListening();\n      }\n\n      if (typeof name === 'undefined') {\n        this.$deleteBtn.addClass('hidden');\n        this.$submitBtn.text(Craft.t('app', 'Create'));\n      } else {\n        this.$deleteBtn.removeClass('hidden');\n        this.$submitBtn.text(Craft.t('app', 'Apply'));\n      }\n\n      this.displayErrors('name', errors ? errors.name : null);\n      this.displayErrors('handle', errors ? errors.handle : null);\n\n      if (!Garnish.isMobileBrowser()) {\n        setTimeout(() => {\n          this.$nameInput.trigger('focus');\n        }, 100);\n      }\n\n      this.base();\n    },\n\n    displayErrors: function (attr, errors) {\n      var $input = this['$' + attr + 'Input'],\n        $errorList = this['$' + attr + 'ErrorList'];\n\n      $errorList.children().remove();\n\n      if (errors) {\n        $input.addClass('error');\n        $errorList.show();\n\n        for (var i = 0; i < errors.length; i++) {\n          $('<li/>').text(errors[i]).appendTo($errorList);\n        }\n      } else {\n        $input.removeClass('error');\n        $errorList.hide();\n      }\n    },\n  });\n\n  /**\n   * Block type class\n   */\n  var BlockType = Garnish.Base.extend({\n    configurator: null,\n    id: null,\n    errors: null,\n\n    inputNamePrefix: null,\n    inputIdPrefix: null,\n\n    $item: null,\n    $nameLabel: null,\n    $handleLabel: null,\n    $nameHiddenInput: null,\n    $handleHiddenInput: null,\n    $settingsBtn: null,\n    $fieldItemsContainer: null,\n    $fieldSettingsContainer: null,\n\n    fields: null,\n    selectedField: null,\n    fieldSort: null,\n    totalNewFields: 0,\n    fieldSettings: null,\n\n    init: function (configurator, $item) {\n      this.configurator = configurator;\n      this.$item = $item;\n      this.id = this.$item.data('id');\n      this.errors = this.$item.data('errors');\n\n      this.inputNamePrefix =\n        this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n      this.inputIdPrefix =\n        this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n      let $nameContainer = this.$item.children('.mci-name');\n      this.$nameLabel = $nameContainer.children('h4');\n      this.$handleLabel = $nameContainer.children('.smalltext');\n      this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n      this.$handleHiddenInput = this.$item.find(\n        'input[name$=\"[handle]\"]:first'\n      );\n      this.$settingsBtn = this.$item.find('.settings');\n\n      // Find the field items container if it exists, otherwise create it\n      this.$fieldItemsContainer =\n        this.configurator.$fieldItemsOuterContainer.children(\n          '[data-id=\"' + this.id + '\"]:first'\n        );\n\n      if (!this.$fieldItemsContainer.length) {\n        this.$fieldItemsContainer = $(\n          '<div data-id=\"' + this.id + '\"/>'\n        ).insertBefore(this.configurator.$newFieldBtn);\n      }\n\n      // Find the field settings container if it exists, otherwise create it\n      this.$fieldSettingsContainer =\n        this.configurator.$fieldSettingItemsContainer.children(\n          '[data-id=\"' + this.id + '\"]:first'\n        );\n\n      if (!this.$fieldSettingsContainer.length) {\n        this.$fieldSettingsContainer = $(\n          '<div data-id=\"' + this.id + '\"/>'\n        ).appendTo(this.configurator.$fieldSettingItemsContainer);\n      }\n\n      // Find the existing fields\n      this.fields = {};\n\n      var $fieldItems = this.$fieldItemsContainer.children();\n\n      for (var i = 0; i < $fieldItems.length; i++) {\n        var $fieldItem = $($fieldItems[i]),\n          id = $fieldItem.data('id');\n\n        this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n        // Is this a new field?\n        var newMatch = typeof id === 'string' && id.match(/new(\\d+)/);\n\n        if (newMatch && newMatch[1] > this.totalNewFields) {\n          this.totalNewFields = parseInt(newMatch[1]);\n        }\n      }\n\n      this.addListener(this.$item, 'click', 'select');\n      this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n      this.fieldSort = new Garnish.DragSort($fieldItems, {\n        handle: '.move',\n        axis: 'y',\n        onSortChange: () => {\n          // Adjust the field setting containers to match the new sort order\n          for (var i = 0; i < this.fieldSort.$items.length; i++) {\n            var $item = $(this.fieldSort.$items[i]),\n              id = $item.data('id'),\n              field = this.fields[id];\n\n            field.$fieldSettingsContainer.appendTo(\n              this.$fieldSettingsContainer\n            );\n          }\n        },\n      });\n    },\n\n    select: function () {\n      if (this.configurator.selectedBlockType === this) {\n        return;\n      }\n\n      if (this.configurator.selectedBlockType) {\n        this.configurator.selectedBlockType.deselect();\n      }\n\n      this.configurator.$fieldsColumnContainer.removeClass('hidden');\n      this.$fieldItemsContainer.removeClass('hidden');\n      this.$item.addClass('sel');\n      this.configurator.selectedBlockType = this;\n      Garnish.$win.trigger('resize');\n    },\n\n    deselect: function () {\n      this.$item.removeClass('sel');\n      this.configurator.$fieldsColumnContainer.addClass('hidden');\n      this.$fieldItemsContainer.addClass('hidden');\n      this.$fieldSettingsContainer.addClass('hidden');\n      this.configurator.selectedBlockType = null;\n\n      if (this.selectedField) {\n        this.selectedField.deselect();\n      }\n\n      Garnish.$win.trigger('resize');\n    },\n\n    showSettings: function () {\n      var blockTypeSettingsModal =\n        this.configurator.getBlockTypeSettingsModal();\n      blockTypeSettingsModal.show(\n        this.$nameHiddenInput.val(),\n        this.$handleHiddenInput.val(),\n        this.errors\n      );\n      blockTypeSettingsModal.onSubmit = this.applySettings.bind(this);\n      blockTypeSettingsModal.onDelete = this.selfDestruct.bind(this);\n    },\n\n    applySettings: function (name, handle) {\n      if (this.errors) {\n        this.errors = null;\n        this.$settingsBtn.removeClass('error');\n      }\n\n      this.$nameLabel.attr('title', name).text(name);\n      this.$handleLabel.attr('title', handle).text(handle);\n      this.$nameHiddenInput.val(name);\n      this.$handleHiddenInput.val(handle);\n    },\n\n    addField: function () {\n      this.totalNewFields++;\n      var id = 'new' + this.totalNewFields;\n\n      var $item = $(\n        '<div class=\"matrixconfigitem mci-field\" data-id=\"' +\n          id +\n          '\">' +\n          '<div class=\"mci-name\">' +\n          '<h4><em class=\"light\">' +\n          Craft.t('app', '(blank)') +\n          '</em></h4>' +\n          '<div class=\"smalltext light code\"></div>' +\n          '</div>' +\n          '<div class=\"actions\">' +\n          '<a class=\"move icon\" title=\"' +\n          Craft.t('app', 'Reorder') +\n          '\"></a>' +\n          '</div>' +\n          '</div>'\n      ).appendTo(this.$fieldItemsContainer);\n\n      this.fields[id] = new Field(this.configurator, this, $item);\n      this.fields[id].select();\n\n      this.fieldSort.addItems($item);\n    },\n\n    selfDestruct: function () {\n      this.deselect();\n      this.$item.remove();\n      this.$fieldItemsContainer.remove();\n      this.$fieldSettingsContainer.remove();\n\n      this.configurator.blockTypes[this.id] = null;\n      delete this.configurator.blockTypes[this.id];\n    },\n  });\n\n  var Field = Garnish.Base.extend({\n    configurator: null,\n    blockType: null,\n    id: null,\n\n    inputNamePrefix: null,\n    inputIdPrefix: null,\n\n    selectedFieldType: null,\n    initializedFieldTypeSettings: null,\n\n    $item: null,\n    $nameLabel: null,\n    $handleLabel: null,\n\n    $fieldSettingsContainer: null,\n    $nameInput: null,\n    $handleInput: null,\n    $requiredCheckbox: null,\n    $typeSelect: null,\n    $translationSettingsContainer: null,\n    $typeSettingsContainer: null,\n    $widthInput: null,\n    $deleteBtn: null,\n\n    init: function (configurator, blockType, $item) {\n      this.configurator = configurator;\n      this.blockType = blockType;\n      this.$item = $item;\n      this.id = this.$item.data('id');\n\n      this.inputNamePrefix =\n        this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n      this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n      this.initializedFieldTypeSettings = {};\n      this.fieldTypeSettingsTemplates = {};\n\n      let $nameContainer = this.$item.children('.mci-name');\n      this.$nameLabel = $nameContainer.children('h4');\n      this.$handleLabel = $nameContainer.children('.smalltext');\n\n      // Find the field settings container if it exists, otherwise create it\n      this.$fieldSettingsContainer =\n        this.blockType.$fieldSettingsContainer.children(\n          '[data-id=\"' + this.id + '\"]:first'\n        );\n\n      var isNew = !this.$fieldSettingsContainer.length;\n\n      if (isNew) {\n        this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(\n          this.blockType.$fieldSettingsContainer\n        );\n      }\n\n      this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n      this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n      this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n      this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n      this.$translationSettingsContainer = $(\n        '#' + this.inputIdPrefix + '-translation-settings'\n      );\n      this.$typeSettingsContainer = this.$fieldSettingsContainer.children(\n        '.mc-fieldtype-settings:first'\n      );\n      this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n      this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n      if (isNew) {\n        this.setFieldType('craft\\\\fields\\\\PlainText');\n      } else {\n        this.selectedFieldType = this.$typeSelect.val();\n        this.initializedFieldTypeSettings[this.selectedFieldType] =\n          this.$typeSettingsContainer.children();\n      }\n\n      if (!this.$handleInput.val()) {\n        new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n      }\n\n      this.addListener(this.$item, 'click', 'select');\n      this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n      this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n      this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n      this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n      this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n      let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n        min: 25,\n        max: 100,\n        step: 25,\n        valueLabel: (width) => {\n          return Craft.t('app', '{pct} width', {pct: `${width}%`});\n        },\n        onChange: (width) => {\n          this.$widthInput.val(width);\n        },\n      });\n      widthSlider.$container.insertAfter($nameContainer);\n    },\n\n    select: function () {\n      if (this.blockType.selectedField === this) {\n        return;\n      }\n\n      if (this.blockType.selectedField) {\n        this.blockType.selectedField.deselect();\n      }\n\n      this.configurator.$fieldSettingsColumnContainer.removeClass('hidden');\n      this.blockType.$fieldSettingsContainer.removeClass('hidden');\n      this.$fieldSettingsContainer.removeClass('hidden');\n      this.$item.addClass('sel');\n      this.blockType.selectedField = this;\n      Garnish.$win.trigger('resize');\n\n      if (!Garnish.isMobileBrowser()) {\n        setTimeout(() => {\n          this.$nameInput.trigger('focus');\n        }, 100);\n      }\n    },\n\n    deselect: function () {\n      this.$item.removeClass('sel');\n      this.configurator.$fieldSettingsColumnContainer.addClass('hidden');\n      this.blockType.$fieldSettingsContainer.addClass('hidden');\n      this.$fieldSettingsContainer.addClass('hidden');\n      this.blockType.selectedField = null;\n      Garnish.$win.trigger('resize');\n    },\n\n    updateNameLabel: function () {\n      const name = this.$nameInput.val();\n      this.$nameLabel\n        .attr('title', name)\n        .html(\n          name\n            ? Craft.escapeHtml(name)\n            : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'\n        );\n    },\n\n    updateHandleLabel: function () {\n      const handle = this.$handleInput.val();\n      this.$handleLabel.attr('title', handle).html(Craft.escapeHtml(handle));\n    },\n\n    updateRequiredIcon: function () {\n      if (this.$requiredCheckbox.prop('checked')) {\n        this.$nameLabel.addClass('mci-required');\n      } else {\n        this.$nameLabel.removeClass('mci-required');\n      }\n    },\n\n    onTypeSelectChange: function () {\n      this.setFieldType(this.$typeSelect.val());\n    },\n\n    setFieldType: function (type) {\n      // Update the Translation Method settings\n      Craft.updateTranslationMethodSettings(\n        type,\n        this.$translationSettingsContainer\n      );\n\n      if (this.selectedFieldType) {\n        this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n      }\n\n      this.selectedFieldType = type;\n      this.$typeSelect.val(type);\n\n      // Show a spinner\n      this.$typeSettingsContainer.html(\n        '<div class=\"zilch\"><div class=\"spinner\"></div></div>'\n      );\n\n      this.getFieldTypeSettings(type)\n        .then(({fresh, $settings, headHtml, bodyHtml}) => {\n          this.$typeSettingsContainer.html('').append($settings);\n          if (fresh) {\n            Craft.initUiElements($settings);\n            Craft.appendHeadHtml(headHtml);\n            Craft.appendBodyHtml(bodyHtml);\n          }\n\n          Garnish.$win.trigger('resize');\n        })\n        .catch(() => {\n          this.$typeSettingsContainer.html('');\n        });\n    },\n\n    getFieldTypeSettings: function (type) {\n      return new Promise((resolve, reject) => {\n        if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n          resolve({\n            fresh: false,\n            $settings: this.initializedFieldTypeSettings[type],\n          });\n          return;\n        }\n\n        this.configurator\n          .getFieldTypeSettingsHtml(type)\n          .then(({settingsHtml, headHtml, bodyHtml}) => {\n            settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n            headHtml = this.getParsedFieldTypeHtml(headHtml);\n            bodyHtml = this.getParsedFieldTypeHtml(bodyHtml);\n            let $settings = $('<div/>').html(settingsHtml);\n            this.initializedFieldTypeSettings[type] = $settings;\n            resolve({\n              fresh: true,\n              $settings: $settings,\n              headHtml: headHtml,\n              bodyHtml: bodyHtml,\n            });\n          })\n          .catch($.noop);\n      });\n    },\n\n    getParsedFieldTypeHtml: function (html) {\n      if (typeof html === 'string') {\n        html = html.replace(\n          new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'),\n          this.blockType.id\n        );\n        html = html.replace(\n          new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'),\n          this.id\n        );\n      } else {\n        html = '';\n      }\n\n      return html;\n    },\n\n    getDefaultFieldSettings: function () {\n      var $container = $('<div/>', {\n        'data-id': this.id,\n      });\n\n      Craft.ui\n        .createTextField({\n          label: Craft.t('app', 'Name'),\n          id: this.inputIdPrefix + '-name',\n          name: this.inputNamePrefix + '[name]',\n        })\n        .appendTo($container);\n\n      Craft.ui\n        .createTextField({\n          label: Craft.t('app', 'Handle'),\n          id: this.inputIdPrefix + '-handle',\n          class: 'code',\n          name: this.inputNamePrefix + '[handle]',\n          maxlength: 64,\n          required: true,\n        })\n        .appendTo($container);\n\n      Craft.ui\n        .createTextareaField({\n          label: Craft.t('app', 'Instructions'),\n          id: this.inputIdPrefix + '-instructions',\n          class: 'nicetext',\n          name: this.inputNamePrefix + '[instructions]',\n        })\n        .appendTo($container);\n\n      let $fieldset = $('<fieldset/>').appendTo($container);\n\n      Craft.ui\n        .createCheckboxField({\n          label: Craft.t('app', 'This field is required'),\n          id: this.inputIdPrefix + '-required',\n          name: this.inputNamePrefix + '[required]',\n        })\n        .appendTo($fieldset);\n\n      Craft.ui\n        .createCheckboxField({\n          label: Craft.t('app', 'Use this field’s values as search keywords'),\n          id: this.inputIdPrefix + '-searchable',\n          name: this.inputNamePrefix + '[searchable]',\n          checked: false,\n        })\n        .appendTo($fieldset);\n\n      var fieldTypeOptions = [];\n\n      for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n        fieldTypeOptions.push({\n          value: this.configurator.fieldTypeInfo[i].type,\n          label: this.configurator.fieldTypeInfo[i].name,\n        });\n      }\n\n      Craft.ui\n        .createSelectField({\n          label: Craft.t('app', 'Field Type'),\n          id: this.inputIdPrefix + '-type',\n          name: this.inputNamePrefix + '[type]',\n          options: fieldTypeOptions,\n          value: 'craft\\\\fields\\\\PlainText',\n        })\n        .appendTo($container);\n\n      if (Craft.isMultiSite) {\n        var $translationSettingsContainer = $('<div/>', {\n          id: this.inputIdPrefix + '-translation-settings',\n        }).appendTo($container);\n\n        Craft.ui\n          .createSelectField({\n            label: Craft.t('app', 'Translation Method'),\n            id: this.inputIdPrefix + '-translation-method',\n            name: this.inputNamePrefix + '[translationMethod]',\n            options: [],\n            value: 'none',\n            toggle: true,\n            targetPrefix: this.inputIdPrefix + '-translation-method-',\n          })\n          .appendTo($translationSettingsContainer);\n\n        var $translationKeyFormatContainer = $('<div/>', {\n          id: this.inputIdPrefix + '-translation-method-custom',\n          class: 'hidden',\n        }).appendTo($translationSettingsContainer);\n\n        Craft.ui\n          .createTextField({\n            label: Craft.t('app', 'Translation Key Format'),\n            id: this.inputIdPrefix + '-translation-key-format',\n            name: this.inputNamePrefix + '[translationKeyFormat]',\n          })\n          .appendTo($translationKeyFormatContainer);\n      }\n\n      $('<hr/>').appendTo($container);\n\n      $('<div/>', {\n        class: 'mc-fieldtype-settings',\n      }).appendTo($container);\n\n      $('<input/>', {\n        type: 'hidden',\n        id: this.inputIdPrefix + '-width',\n        name: this.inputNamePrefix + '[width]',\n        value: '100',\n      }).appendTo($container);\n\n      $('<hr/>').appendTo($container);\n\n      $('<a/>', {\n        class: 'error delete',\n        text: Craft.t('app', 'Delete'),\n      }).appendTo($container);\n\n      return $container;\n    },\n\n    confirmDelete: function () {\n      if (\n        confirm(Craft.t('app', 'Are you sure you want to delete this field?'))\n      ) {\n        this.selfDestruct();\n      }\n    },\n\n    selfDestruct: function () {\n      this.deselect();\n      this.$item.remove();\n      this.$fieldSettingsContainer.remove();\n\n      this.blockType.fields[this.id] = null;\n      delete this.blockType.fields[this.id];\n    },\n  });\n})(jQuery);\n"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","placeholderKey","$container","$blockTypesColumnContainer","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$blockTypeItemsContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","blockTypes","selectedBlockType","blockTypeSort","totalNewBlockTypes","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","init","this","formatInputId","children","$fieldItemsOuterContainer","$blockTypeItems","i","length","$item","id","data","BlockType","newMatch","match","parseInt","DragSort","handle","axis","addListener","getFieldTypeInfo","type","addBlockType","getBlockTypeSettingsModal","blockTypeSettingsModal","show","onSubmit","name","t","appendTo","applySettings","select","addField","addItems","addFieldToSelectedBlockType","BlockTypeSettingsModal","getFieldTypeSettingsHtml","Promise","resolve","reject","cancel","requestAnimationFrame","axios","CancelToken","source","sendActionRequest","cancelToken","token","namespace","then","response","cp","displayError","Modal","base","$form","$bod","setContainer","$body","$nameInputContainer","ui","createTextField","label","instructions","find","$nameInput","$nameErrorList","hide","$handleInputContainer","class","maxlength","$handleInput","$handleErrorList","$deleteBtn","$buttons","$cancelBtn","text","$submitBtn","handleGenerator","HandleGenerator","onFormSubmit","ev","preventDefault","visible","listening","updateTarget","trim","val","shake","onDeleteClick","confirm","onDelete","errors","stopListening","startListening","addClass","removeClass","displayErrors","isMobileBrowser","setTimeout","trigger","attr","$input","$errorList","remove","configurator","$nameLabel","$handleLabel","$nameHiddenInput","$handleHiddenInput","$settingsBtn","$fieldSettingsContainer","fields","selectedField","fieldSort","totalNewFields","fieldSettings","$nameContainer","insertBefore","$fieldItems","$fieldItem","Field","onSortChange","$items","deselect","$win","showSettings","bind","selfDestruct","blockType","selectedFieldType","initializedFieldTypeSettings","$requiredCheckbox","$typeSelect","$translationSettingsContainer","$typeSettingsContainer","$widthInput","fieldTypeSettingsTemplates","isNew","getDefaultFieldSettings","setFieldType","SlidePicker","min","max","step","valueLabel","width","pct","onChange","insertAfter","updateNameLabel","html","escapeHtml","updateHandleLabel","updateRequiredIcon","prop","onTypeSelectChange","updateTranslationMethodSettings","detach","getFieldTypeSettings","fresh","$settings","headHtml","bodyHtml","append","initUiElements","appendHeadHtml","appendBodyHtml","settingsHtml","getParsedFieldTypeHtml","noop","replace","RegExp","required","createTextareaField","$fieldset","createCheckboxField","checked","fieldTypeOptions","push","value","createSelectField","options","isMultiSite","toggle","targetPrefix","$translationKeyFormatContainer","confirmDelete","jQuery"],"sourceRoot":""}