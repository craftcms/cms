{"version":3,"file":"QuickPostWidget.js","mappings":"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","sources":["webpack:///./QuickPostWidget.js"],"sourcesContent":["(function ($) {\n  /** global: Craft */\n  /** global: Garnish */\n  Craft.QuickPostWidget = Garnish.Base.extend({\n    params: null,\n    initFields: null,\n    formHtml: null,\n    $widget: null,\n    $form: null,\n    $saveBtn: null,\n    $errorList: null,\n    loading: false,\n\n    init: function (widgetId, params, initFields, formHtml) {\n      this.params = params;\n      this.initFields = initFields;\n      this.formHtml = formHtml;\n      this.$widget = $('#widget' + widgetId);\n\n      this.initForm(this.$widget.find('form:first'));\n    },\n\n    initForm: function ($form) {\n      this.$form = $form;\n      this.$saveBtn = this.$form.find('button[type=submit]');\n\n      this.initFields();\n\n      const $menuBtn = this.$form.find('> .buttons > .btngroup > .menubtn'),\n        $saveAndContinueEditingBtn = $menuBtn\n          .data('trigger')\n          .$container.find('> ul > li > a');\n\n      this.addListener(this.$form, 'submit', 'handleFormSubmit');\n      this.addListener(\n        $saveAndContinueEditingBtn,\n        'click',\n        'saveAndContinueEditing'\n      );\n\n      this.addListener($saveAndContinueEditingBtn, 'keydown', (event) => {\n        if (\n          event.keyCode === Garnish.SPACE_KEY ||\n          event.keyCode === Garnish.RETURN_KEY\n        ) {\n          event.preventDefault();\n          this.saveAndContinueEditing();\n        }\n      });\n    },\n\n    handleFormSubmit: function (event) {\n      event.preventDefault();\n\n      this.save(this.onSave.bind(this));\n    },\n\n    saveAndContinueEditing: function () {\n      this.save(this.gotoEntry.bind(this));\n    },\n\n    save: function (callback) {\n      if (this.loading) {\n        return;\n      }\n\n      this.loading = true;\n      this.$saveBtn.addClass('loading');\n\n      var formData = Garnish.getPostData(this.$form),\n        data = $.extend({enabled: 1}, formData, this.params);\n\n      // Stick with postActionRequest() for now, which handles the post data in this format better than sendActionRequest().\n      Craft.postActionRequest(\n        'entries/save-entry',\n        data,\n        (response, textStatus) => {\n          this.loading = false;\n          this.$saveBtn.removeClass('loading');\n\n          if (this.$errorList) {\n            this.$errorList.children().remove();\n          }\n\n          if (textStatus === 'success') {\n            Craft.cp.displaySuccess(Craft.t('app', 'Entry saved.'), {\n              details: response.elementHtml,\n            });\n            callback(response);\n          } else {\n            Craft.cp.displayError(Craft.t('app', 'Couldn’t save entry.'));\n\n            if (response && response.errors) {\n              if (!this.$errorList) {\n                this.$errorList = $('<ul class=\"errors\"/>').insertAfter(\n                  this.$form\n                );\n              }\n\n              for (var attribute in response.errors) {\n                if (!response.errors.hasOwnProperty(attribute)) {\n                  continue;\n                }\n\n                for (var i = 0; i < response.errors[attribute].length; i++) {\n                  var error = response.errors[attribute][i];\n                  $('<li/>', {\n                    text: error,\n                  }).appendTo(this.$errorList);\n                }\n              }\n            }\n          }\n        }\n      );\n    },\n\n    onSave: function (response) {\n      // Reset the widget\n      var $newForm = $(this.formHtml);\n      this.$form.replaceWith($newForm);\n      Craft.initUiElements($newForm);\n      this.initForm($newForm);\n\n      // Are there any Recent Entries widgets to notify?\n      if (typeof Craft.RecentEntriesWidget !== 'undefined') {\n        for (var i = 0; i < Craft.RecentEntriesWidget.instances.length; i++) {\n          var widget = Craft.RecentEntriesWidget.instances[i];\n          if (\n            !widget.params.sectionId ||\n            widget.params.sectionId == this.params.sectionId\n          ) {\n            widget.addEntry({\n              url: response.cpEditUrl,\n              title: response.title,\n              dateCreated: response.dateCreated,\n              username: response.authorUsername,\n            });\n          }\n        }\n      }\n    },\n\n    gotoEntry: function (response) {\n      // Redirect to the entry’s edit URL\n      Craft.redirectTo(response.cpEditUrl);\n    },\n  });\n})(jQuery);\n"],"names":["$","jQuery","Craft","QuickPostWidget","Garnish","Base","extend","params","initFields","formHtml","$widget","$form","$saveBtn","$errorList","loading","init","widgetId","this","initForm","find","$saveAndContinueEditingBtn","data","$container","addListener","event","keyCode","SPACE_KEY","RETURN_KEY","preventDefault","saveAndContinueEditing","handleFormSubmit","save","onSave","bind","gotoEntry","callback","addClass","formData","getPostData","enabled","postActionRequest","response","textStatus","removeClass","children","remove","cp","displaySuccess","t","details","elementHtml","displayError","errors","attribute","insertAfter","hasOwnProperty","i","length","error","text","appendTo","$newForm","replaceWith","initUiElements","RecentEntriesWidget","instances","widget","sectionId","addEntry","url","cpEditUrl","title","dateCreated","username","authorUsername","redirectTo"],"sourceRoot":""}